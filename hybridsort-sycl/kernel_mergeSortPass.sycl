
int gid = item.get_global_id(0);
// The division to work on
int division = gid / threadsPerDiv;
if(division >= DIVISIONS) return;
// The block within the division
int int_gid = gid - division * threadsPerDiv;
int Astart = constStartAddr_acc[division] + int_gid * nrElems;

int Bstart = Astart + nrElems/2;
//global sycl::float4 *resStart;
auto resStart= &(result_acc[Astart]);

if(Astart >= constStartAddr_acc[division + 1])
  return;
  if(Bstart >= constStartAddr_acc[division + 1]){
    for(int i=0; i<(constStartAddr_acc[division + 1] - Astart); i++)
    {
      resStart[i] = input_acc[Astart + i];
    }
    return;
  }

int aidx = 0;
int bidx = 0;
int outidx = 0;
sycl::float4 a, b;
a = input_acc[Astart + aidx];
b = input_acc[Bstart + bidx];

while(true)
{
  /**
   * For some reason, it's faster to do the texture fetches here than
   * after the merge
   */
  sycl::float4 nextA = input_acc[Astart + aidx + 1];
  sycl::float4 nextB;
  if (Bstart + bidx + 1 >= listsize/4) 
    nextB = sycl::float4(0.f);
  else
    nextB = input_acc[Bstart + bidx + 1];

  sycl::float4 na = getLowest(a,b);
  sycl::float4 nb = getHighest(a,b);
  a = sortElem(na);
  b = sortElem(nb);
  // Now, a contains the lowest four elements, sorted
  resStart[outidx++] = a;

  bool elemsLeftInA;
  bool elemsLeftInB;

  elemsLeftInA = (aidx + 1 < nrElems/2); // Astart + aidx + 1 is allways less than division border
  elemsLeftInB = (bidx + 1 < nrElems/2) && (Bstart + bidx + 1 < constStartAddr_acc[division + 1]);

  if(elemsLeftInA){
    if(elemsLeftInB){
      float nextA_t = nextA.x();
      float nextB_t = nextB.x();
      if(nextA_t < nextB_t) { aidx += 1; a = nextA; }
      else { bidx += 1;  a = nextB; }
    }
    else {
      aidx += 1; a = nextA;
    }
  }
  else {
    if(elemsLeftInB){
      bidx += 1;  a = nextB;
    }
    else {
      break;
    }
  }
}
resStart[outidx++] = b;

