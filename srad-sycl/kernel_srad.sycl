
// indexes
int bx = item.get_group(0);             // get current horizontal block index
int tx = item.get_local_id(0);          // get current horizontal thread index
int ei = bx*NUMBER_THREADS+tx;          // more threads than actual elements !!!
int row;                                // column, x position
int col;                                // row, y position

// variables
FP d_Jc;
FP d_dN_loc, d_dS_loc, d_dW_loc, d_dE_loc;
FP d_c_loc;
FP d_G2,d_L,d_num,d_den,d_qsqr;

// figure out row/col location in new matrix
row = (ei+1) % Nr - 1;                  // (0-n) row
col = (ei+1) / Nr + 1 - 1;              // (0-n) column
if((ei+1) % Nr == 0){
  row = Nr - 1;
  col = col - 1;
}

if(ei<Ne){                              // make sure that only threads matching jobs run

  // directional derivatives, ICOV, diffusion coefficent
  d_Jc = d_I[ei];                       // get value of the current element

  // directional derivates (every element of IMAGE)(try to copy to shared memory or temp files)
  d_dN_loc = d_I[d_iN[row] + Nr*col] - d_Jc;            // north direction derivative
  d_dS_loc = d_I[d_iS[row] + Nr*col] - d_Jc;            // south direction derivative
  d_dW_loc = d_I[row + Nr*d_jW[col]] - d_Jc;            // west direction derivative
  d_dE_loc = d_I[row + Nr*d_jE[col]] - d_Jc;            // east direction derivative

  // normalized discrete gradient mag squared (equ 52,53)
  d_G2 = (d_dN_loc*d_dN_loc + d_dS_loc*d_dS_loc + d_dW_loc*d_dW_loc + d_dE_loc*d_dE_loc) / (d_Jc*d_Jc);  // gradient (based on derivatives)

  // normalized discrete laplacian (equ 54)
  d_L = (d_dN_loc + d_dS_loc + d_dW_loc + d_dE_loc) / d_Jc;   // laplacian (based on derivatives)

  // ICOV (equ 31/35)
  d_num  = ((FP)0.5*d_G2) - (((FP)1.0/(FP)16.0)*(d_L*d_L)) ;  // num (based on gradient and laplacian)
  d_den  = (FP)1.0 + ((FP)0.25*d_L);                          // den (based on laplacian)
  d_qsqr = d_num/(d_den*d_den);                               // qsqr (based on num and den)

  // diffusion coefficent (equ 33) (every element of IMAGE)
  d_den = (d_qsqr-q0sqr) / (q0sqr * ((FP)1.0+q0sqr)) ;     // den (based on qsqr and q0sqr)
  d_c_loc = (FP)1.0 / ((FP)1.0+d_den) ;                    // diffusion coefficient (based on den)

  // saturate diffusion coefficent to 0-1 range
  if (d_c_loc < 0){                       // if diffusion coefficient < 0
    d_c_loc = 0;                          // ... set to 0
  }
  else if (d_c_loc > 1){                  // if diffusion coefficient > 1
    d_c_loc = 1;                          // ... set to 1
  }

  // save data to global memory
  d_dN[ei] = d_dN_loc; 
  d_dS[ei] = d_dS_loc; 
  d_dW[ei] = d_dW_loc; 
  d_dE[ei] = d_dE_loc;
  d_c[ei] = d_c_loc;

}
