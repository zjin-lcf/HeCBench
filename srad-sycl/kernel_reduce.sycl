int bx = item.get_group(0);              // get current horizontal block index
int tx = item.get_local_id(0);           // get current horizontal thread index
int ei = (bx*NUMBER_THREADS)+tx;         // unique thread id, more threads than actual elements !!!
int nf = NUMBER_THREADS-(blocks_work_size2*NUMBER_THREADS-no);        // number of elements assigned to last block
int df = 0;                              // divisibility factor for the last block

// counters
int i;

// copy data to shared memory
if(ei<no){                              // do only for the number of elements, omit extra threads

  d_psum[tx] = d_sums[ei*mul];
  d_psum2[tx] = d_sums2[ei*mul];

}

// Lingjie Zhang modificated at Nov 1, 2015
item.barrier();

// reduction of sums if all blocks are full (rare case)  
if(nf == NUMBER_THREADS){
  // sum of every 2, 4, ..., NUMBER_THREADS elements
  for(i=2; i<=NUMBER_THREADS; i=2*i){
    // sum of elements
    if((tx+1) % i == 0){                      // every ith
      d_psum[tx] = d_psum[tx] + d_psum[tx-i/2];
      d_psum2[tx] = d_psum2[tx] + d_psum2[tx-i/2];
    }
    // synchronization
    item.barrier(sycl::access::fence_space::local_space);
  }
  // final sumation by last thread in every block
  if(tx==(NUMBER_THREADS-1)){                      // block result stored in global memory
    d_sums[bx*mul*NUMBER_THREADS] = d_psum[tx];
    d_sums2[bx*mul*NUMBER_THREADS] = d_psum2[tx];
  }
}
// reduction of sums if last block is not full (common case)
else{ 
  // for full blocks (all except for last block)
  if(bx != (blocks_work_size2 - 1)){                      //
    // sum of every 2, 4, ..., NUMBER_THREADS elements
    for(i=2; i<=NUMBER_THREADS; i=2*i){                //
      // sum of elements
      if((tx+1) % i == 0){                    // every ith
        d_psum[tx] = d_psum[tx] + d_psum[tx-i/2];
        d_psum2[tx] = d_psum2[tx] + d_psum2[tx-i/2];
      }
      // synchronization
      item.barrier(sycl::access::fence_space::local_space);
    }
    // final sumation by last thread in every block
    if(tx==(NUMBER_THREADS-1)){                    // block result stored in global memory
      d_sums[bx*mul*NUMBER_THREADS] = d_psum[tx];
      d_sums2[bx*mul*NUMBER_THREADS] = d_psum2[tx];
    }
  }
  // for not full block (last block)
  else{                                //
    // figure out divisibility
    for(i=2; i<=NUMBER_THREADS; i=2*i){                //
      if(nf >= i){
        df = i;
      }
    }
    // sum of every 2, 4, ..., NUMBER_THREADS elements
    for(i=2; i<=df; i=2*i){                      //
      // sum of elements (only busy threads)
      if((tx+1) % i == 0 && tx<df){                // every ith
        d_psum[tx] = d_psum[tx] + d_psum[tx-i/2];
        d_psum2[tx] = d_psum2[tx] + d_psum2[tx-i/2];
      }
      // synchronization (all threads)
      item.barrier(sycl::access::fence_space::local_space);
    }
    // remainder / final summation by last thread
    if(tx==(df-1)){                    //
      // compute the remainder and final summation by last busy thread
      for(i=(bx*NUMBER_THREADS)+df; i<(bx*NUMBER_THREADS)+nf; i++){            //
        d_psum[tx] = d_psum[tx] + d_sums[i];
        d_psum2[tx] = d_psum2[tx] + d_sums2[i];
      }
      // final sumation by last thread in every block
      d_sums[bx*mul*NUMBER_THREADS] = d_psum[tx];
      d_sums2[bx*mul*NUMBER_THREADS] = d_psum2[tx];
    }
  }
}
