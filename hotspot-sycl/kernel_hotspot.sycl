float amb_temp = 80.0f;
float step_div_Cap;
float Rx_1,Ry_1,Rz_1;

int bx = item.get_group(1);
int by = item.get_group(0);

int tx = item.get_local_id(1);
int ty = item.get_local_id(0);

step_div_Cap =step/Cap;

Rx_1 = 1.f/Rx;
Ry_1 = 1.f/Ry;
Rz_1 = 1.f/Rz;

// each block finally computes result for a small block
// after N iters.
// it is the non-overlapping small blocks that cover
// all the input data

// calculate the small block size
int small_block_rows = BLOCK_SIZE-iter*2;
int small_block_cols = BLOCK_SIZE-iter*2;

// calculate the boundary for the block according to
// the boundary of its small block
int blkY = small_block_rows*by-borderRows;
int blkX = small_block_cols*bx-borderCols;
int blkYmax = blkY+BLOCK_SIZE-1;
int blkXmax = blkX+BLOCK_SIZE-1;

// calculate the global thread coordination
int yidx = blkY+ty;
int xidx = blkX+tx;

// load data if it is within the valid input range
int loadYidx=yidx, loadXidx=xidx;
int index = col*loadYidx+loadXidx;

if(IN_RANGE(loadYidx, 0, row-1) && IN_RANGE(loadXidx, 0, col-1)){
  temp_on_device[ty][tx] = temp_src_acc[index];  // Load the temperature data from global memory to shared memory
  power_on_device[ty][tx] = power_acc[index];// Load the power_acc data from global memory to shared memory
}
item.barrier(sycl::access::fence_space::local_space);

// effective range within this block that falls within
// the valid range of the input data
// used to rule out computation outside the boundary.
int validYmin = (blkY < 0) ? -blkY : 0;
int validYmax = (blkYmax > row-1) ? BLOCK_SIZE-1-(blkYmax-row+1) : BLOCK_SIZE-1;
int validXmin = (blkX < 0) ? -blkX : 0;
int validXmax = (blkXmax > col-1) ? BLOCK_SIZE-1-(blkXmax-col+1) : BLOCK_SIZE-1;

int N = ty-1;
int S = ty+1;
int W = tx-1;
int E = tx+1;

N = (N < validYmin) ? validYmin : N;
S = (S > validYmax) ? validYmax : S;
W = (W < validXmin) ? validXmin : W;
E = (E > validXmax) ? validXmax : E;

bool computed;
for (int i=0; i<iter ; i++){
  computed = false;
  if( IN_RANGE(tx, i+1, BLOCK_SIZE-i-2) &&  \
      IN_RANGE(ty, i+1, BLOCK_SIZE-i-2) &&  \
      IN_RANGE(tx, validXmin, validXmax) && \
      IN_RANGE(ty, validYmin, validYmax) ) {
    computed = true;
    temp_t[ty][tx] =   temp_on_device[ty][tx] + step_div_Cap * (power_on_device[ty][tx] +
        (temp_on_device[S][tx] + temp_on_device[N][tx] - 2.f * temp_on_device[ty][tx]) * Ry_1 +
        (temp_on_device[ty][E] + temp_on_device[ty][W] - 2.f * temp_on_device[ty][tx]) * Rx_1 +
        (amb_temp - temp_on_device[ty][tx]) * Rz_1);

  }
  item.barrier(sycl::access::fence_space::local_space);

  if(i==iter-1)
    break;
  if(computed)   //Assign the computation range
    temp_on_device[ty][tx]= temp_t[ty][tx];

  item.barrier(sycl::access::fence_space::local_space);
}

// update the global memory
// after the last iter, only threads coordinated within the
// small block perform the calculation and switch on ``computed''
if (computed){
  temp_dst_acc[index]= temp_t[ty][tx];
}
