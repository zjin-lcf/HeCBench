int local_id = item.get_local_id(0);
int i = item.get_global_id(0);
if(0 == local_id)
  sumWeights = partial_sums_d[0];
item.barrier(sycl::access::fence_space::local_space);
if(i < Nparticles) {
    weights_d[i] = weights_d[i]/sumWeights;
}
item.barrier(sycl::access::fence_space::local_space);
if(i == 0) {
  CDF_d[0] = weights_d[0];
  for(int x = 1; x < Nparticles; x++){
    CDF_d[x] = weights_d[x] + CDF_d[x-1];
  }

  seed_d[i] = (A*seed_d[i] + C) % M;
  float p = sycl::fabs(seed_d[i]/((float)M));
  seed_d[i] = (A*seed_d[i] + C) % M;
  float q = sycl::fabs(seed_d[i]/((float)M));
  u_d[0] = (1.0f/((float)(Nparticles))) * 
    (sycl::sqrt(-2.0f*sycl::log(p))*sycl::cos(2.0f*PI*q));
  // do this to allow all threads in all blocks to use the same u1
}
item.barrier(sycl::access::fence_space::local_space);
if(0 == local_id)
  u1 = u_d[0];
item.barrier(sycl::access::fence_space::local_space);
if(i < Nparticles)
{
  u_d[i] = u1 + i/((float)(Nparticles));
}
