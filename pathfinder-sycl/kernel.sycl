int BLOCK_SIZE = item.get_local_range(0);
int bx = item.get_group(0);
int tx = item.get_local_id(0);

// Each block finally computes result for a small block
// after N iterations.
// it is the non-overlapping small blocks that cover
// all the input data

// calculate the small block size.
int small_block_cols = BLOCK_SIZE - (iteration*theHalo*2);

// calculate the boundary for the block according to
// the boundary of its small block
int blkX = (small_block_cols*bx) - borderCols;
int blkXmax = blkX+BLOCK_SIZE-1;

// calculate the global thread coordination
int xidx = blkX+tx;

// effective range within this block that falls within
// the valid range of the input data
// used to rule out computation outside the boundary.
int validXmin = (blkX < 0) ? -blkX : 0;
int validXmax = (blkXmax > cols-1) ? BLOCK_SIZE-1-(blkXmax-cols+1) : BLOCK_SIZE-1;

int W = tx-1;
int E = tx+1;

W = (W < validXmin) ? validXmin : W;
E = (E > validXmax) ? validXmax : E;

bool isValid = IN_RANGE(tx, validXmin, validXmax);

if(IN_RANGE(xidx, 0, cols-1))
{
  prev[tx] = d_gpuSrc[xidx];
}

item.barrier(sycl::access::fence_space::local_space);

bool computed;
for (int i = 0; i < iteration; i++)
{
  computed = false;

  if( IN_RANGE(tx, i+1, BLOCK_SIZE-i-2) && isValid )
  {
    computed = true;
    int left = prev[W];
    int up = prev[tx];
    int right = prev[E];
    int shortest = MIN(left, up);
    shortest = MIN(shortest, right);

    int index = cols*(t+i)+xidx;
    result[tx] = shortest + d_gpuWall[index];

    // ===================================================================
    // add debugging info to the debug output buffer...
    if (tx==11 && i==0)
    {
      // set bufIndex to what value/range of values you want to know.
      int bufIndex = d_gpuSrc[xidx];
      // dont touch the line below.
      d_outputBuffer[bufIndex] = 1;
    }
    // ===================================================================
  }

  item.barrier(sycl::access::fence_space::local_space);

  if(i==iteration-1)
  {
    // we are on the last iteration, and thus don't need to 
    // compute for the next step.
    break;
  }

  if(computed)
  {
    //Assign the computation range
    prev[tx] = result[tx];
  }
  item.barrier(sycl::access::fence_space::local_space);
}

// update the global memory
// after the last iteration, only threads coordinated within the
// small block perform the calculation and switch on "computed"
if (computed)
{
  d_gpuResult[xidx] = result[tx];
}




