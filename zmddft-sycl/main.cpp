
/*
 * Based on codes generated by Spiral 8.4.1, www.spiral.net
 */

#include <stdio.h>
#include <stdlib.h>
#include <chrono>
#include <random>
#include <sycl/sycl.hpp>

#define __syncthreads() \
  item.barrier(sycl::access::fence_space::local_space)

const double d[512] = {
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 1.0, 0.0,
  1.0, 0.0, 0.98078528040323043, (-0.19509032201612825),
  0.99518472667219693, (-0.098017140329560604), 0.95694033573220882, (-0.29028467725446233),
  0.99969881869620425, (-0.024541228522912288), 0.97570213003852857, (-0.2191012401568698),
  0.99247953459870997, (-0.1224106751992162), 0.94952818059303667, (-0.31368174039889152),
  0.99879545620517241, (-0.049067674327418015), 0.97003125319454397, (-0.24298017990326387),
  0.98917650996478101, (-0.14673047445536175), 0.94154406518302081, (-0.33688985339222005),
  0.99729045667869021, (-0.073564563599667426), 0.96377606579543984, (-0.26671275747489837),
  0.98527764238894122, (-0.17096188876030122), 0.93299279883473896, (-0.35989503653498811),
  1.0, 0.0, 0.92387953251128674, (-0.38268343236508978),
  0.98078528040323043, (-0.19509032201612825), 0.83146961230254524, (-0.55557023301960218),
  0.99879545620517241, (-0.049067674327418015), 0.90398929312344334, (-0.42755509343028208),
  0.97003125319454397, (-0.24298017990326387), 0.80320753148064494, (-0.59569930449243336),
  0.99518472667219693, (-0.098017140329560604), 0.88192126434835505, (-0.47139673682599764),
  0.95694033573220882, (-0.29028467725446233), 0.77301045336273699, (-0.63439328416364549),
  0.98917650996478101, (-0.14673047445536175), 0.85772861000027212, (-0.51410274419322166),
  0.94154406518302081, (-0.33688985339222005), 0.74095112535495922, (-0.67155895484701833),
  1.0, 0.0, 0.83146961230254524, (-0.55557023301960218),
  0.95694033573220882, (-0.29028467725446233), 0.63439328416364549, (-0.77301045336273699),
  0.99729045667869021, (-0.073564563599667426), 0.78834642762660623, (-0.61523159058062682),
  0.93299279883473896, (-0.35989503653498811), 0.57580819141784534, (-0.81758481315158371),
  0.98917650996478101, (-0.14673047445536175), 0.74095112535495922, (-0.67155895484701833),
  0.90398929312344334, (-0.42755509343028208), 0.51410274419322166, (-0.85772861000027212),
  0.97570213003852857, (-0.2191012401568698), 0.68954054473706683, (-0.724247082951467),
  0.87008699110871146, (-0.49289819222978404), 0.44961132965460654, (-0.89322430119551532),
  1.0, 0.0, 0.70710678118654757, (-0.70710678118654757),
  0.92387953251128674, (-0.38268343236508978), 0.38268343236508978, (-0.92387953251128674),
  0.99518472667219693, (-0.098017140329560604), 0.63439328416364549, (-0.77301045336273699),
  0.88192126434835505, (-0.47139673682599764), 0.29028467725446233, (-0.95694033573220882),
  0.98078528040323043, (-0.19509032201612825), 0.55557023301960218, (-0.83146961230254524),
  0.83146961230254524, (-0.55557023301960218), 0.19509032201612825, (-0.98078528040323043),
  0.95694033573220882, (-0.29028467725446233), 0.47139673682599764, (-0.88192126434835505),
  0.77301045336273699, (-0.63439328416364549), 0.098017140329560604, (-0.99518472667219693),
  1.0, 0.0, 0.55557023301960218, (-0.83146961230254524),
  0.88192126434835505, (-0.47139673682599764), 0.098017140329560604, (-0.99518472667219693),
  0.99247953459870997, (-0.1224106751992162), 0.44961132965460654, (-0.89322430119551532),
  0.81758481315158371, (-0.57580819141784534), (-0.024541228522912288), (-0.99969881869620425),
  0.97003125319454397, (-0.24298017990326387), 0.33688985339222005, (-0.94154406518302081),
  0.74095112535495922, (-0.67155895484701833), (-0.14673047445536175), (-0.98917650996478101),
  0.93299279883473896, (-0.35989503653498811), 0.2191012401568698, (-0.97570213003852857),
  0.65317284295377676, (-0.75720884650648457), (-0.26671275747489837), (-0.96377606579543984),
  1.0, 0.0, 0.38268343236508978, (-0.92387953251128674),
  0.83146961230254524, (-0.55557023301960218), (-0.19509032201612825), (-0.98078528040323043),
  0.98917650996478101, (-0.14673047445536175), 0.24298017990326387, (-0.97003125319454397),
  0.74095112535495922, (-0.67155895484701833), (-0.33688985339222005), (-0.94154406518302081),
  0.95694033573220882, (-0.29028467725446233), 0.098017140329560604, (-0.99518472667219693),
  0.63439328416364549, (-0.77301045336273699), (-0.47139673682599764), (-0.88192126434835505),
  0.90398929312344334, (-0.42755509343028208), (-0.049067674327418015), (-0.99879545620517241),
  0.51410274419322166, (-0.85772861000027212), (-0.59569930449243336), (-0.80320753148064494),
  1.0, 0.0, 0.19509032201612825, (-0.98078528040323043),
  0.77301045336273699, (-0.63439328416364549), (-0.47139673682599764), (-0.88192126434835505),
  0.98527764238894122, (-0.17096188876030122), 0.024541228522912288, (-0.99969881869620425),
  0.65317284295377676, (-0.75720884650648457), (-0.61523159058062682), (-0.78834642762660623),
  0.94154406518302081, (-0.33688985339222005), (-0.14673047445536175), (-0.98917650996478101),
  0.51410274419322166, (-0.85772861000027212), (-0.74095112535495922), (-0.67155895484701833),
  0.87008699110871146, (-0.49289819222978404), (-0.31368174039889152), (-0.94952818059303667),
  0.35989503653498811, (-0.93299279883473896), (-0.84485356524970712), (-0.53499761988709715),
  1.0, 0.0, 0.0, (-1.0),
  0.70710678118654757, (-0.70710678118654757), (-0.70710678118654757), (-0.70710678118654757),
  0.98078528040323043, (-0.19509032201612825), (-0.19509032201612825), (-0.98078528040323043),
  0.55557023301960218, (-0.83146961230254524), (-0.83146961230254524), (-0.55557023301960218),
  0.92387953251128674, (-0.38268343236508978), (-0.38268343236508978), (-0.92387953251128674),
  0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), (-0.38268343236508978),
  0.83146961230254524, (-0.55557023301960218), (-0.55557023301960218), (-0.83146961230254524),
  0.19509032201612825, (-0.98078528040323043), (-0.98078528040323043), (-0.19509032201612825),
  1.0, 0.0, (-0.19509032201612825), (-0.98078528040323043),
  0.63439328416364549, (-0.77301045336273699), (-0.88192126434835505), (-0.47139673682599764),
  0.97570213003852857, (-0.2191012401568698), (-0.40524131400498986), (-0.91420975570353069),
  0.44961132965460654, (-0.89322430119551532), (-0.96377606579543984), (-0.26671275747489837),
  0.90398929312344334, (-0.42755509343028208), (-0.59569930449243336), (-0.80320753148064494),
  0.24298017990326387, (-0.97003125319454397), (-0.99879545620517241), (-0.049067674327418015),
  0.78834642762660623, (-0.61523159058062682), (-0.75720884650648457), (-0.65317284295377676),
  0.024541228522912288, (-0.99969881869620425), (-0.98527764238894122), 0.17096188876030122,
  1.0, 0.0, (-0.38268343236508978), (-0.92387953251128674),
  0.55557023301960218, (-0.83146961230254524), (-0.98078528040323043), (-0.19509032201612825),
  0.97003125319454397, (-0.24298017990326387), (-0.59569930449243336), (-0.80320753148064494),
  0.33688985339222005, (-0.94154406518302081), (-0.99879545620517241), 0.049067674327418015,
  0.88192126434835505, (-0.47139673682599764), (-0.77301045336273699), (-0.63439328416364549),
  0.098017140329560604, (-0.99518472667219693), (-0.95694033573220882), 0.29028467725446233,
  0.74095112535495922, (-0.67155895484701833), (-0.90398929312344334), (-0.42755509343028208),
  (-0.14673047445536175), (-0.98917650996478101), (-0.85772861000027212), 0.51410274419322166,
  1.0, 0.0, (-0.55557023301960218), (-0.83146961230254524),
  0.47139673682599764, (-0.88192126434835505), (-0.99518472667219693), 0.098017140329560604,
  0.96377606579543984, (-0.26671275747489837), (-0.75720884650648457), (-0.65317284295377676),
  0.2191012401568698, (-0.97570213003852857), (-0.93299279883473896), 0.35989503653498811,
  0.85772861000027212, (-0.51410274419322166), (-0.90398929312344334), (-0.42755509343028208),
  (-0.049067674327418015), (-0.99879545620517241), (-0.80320753148064494), 0.59569930449243336,
  0.68954054473706683, (-0.724247082951467), (-0.98527764238894122), (-0.17096188876030122),
  (-0.31368174039889152), (-0.94952818059303667), (-0.61523159058062682), 0.78834642762660623,
  1.0, 0.0, (-0.70710678118654757), (-0.70710678118654757),
  0.38268343236508978, (-0.92387953251128674), (-0.92387953251128674), 0.38268343236508978,
  0.95694033573220882, (-0.29028467725446233), (-0.88192126434835505), (-0.47139673682599764),
  0.098017140329560604, (-0.99518472667219693), (-0.77301045336273699), 0.63439328416364549,
  0.83146961230254524, (-0.55557023301960218), (-0.98078528040323043), (-0.19509032201612825),
  (-0.19509032201612825), (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524,
  0.63439328416364549, (-0.77301045336273699), (-0.99518472667219693), 0.098017140329560604,
  (-0.47139673682599764), (-0.88192126434835505), (-0.29028467725446233), 0.95694033573220882,
  1.0, 0.0, (-0.83146961230254524), (-0.55557023301960218),
  0.29028467725446233, (-0.95694033573220882), (-0.77301045336273699), 0.63439328416364549,
  0.94952818059303667, (-0.31368174039889152), (-0.96377606579543984), (-0.26671275747489837),
  (-0.024541228522912288), (-0.99969881869620425), (-0.53499761988709715), 0.84485356524970712,
  0.80320753148064494, (-0.59569930449243336), (-0.99879545620517241), 0.049067674327418015,
  (-0.33688985339222005), (-0.94154406518302081), (-0.24298017990326387), 0.97003125319454397,
  0.57580819141784534, (-0.81758481315158371), (-0.93299279883473896), 0.35989503653498811,
  (-0.61523159058062682), (-0.78834642762660623), 0.073564563599667426, 0.99729045667869021,
  1.0, 0.0, (-0.92387953251128674), (-0.38268343236508978),
  0.19509032201612825, (-0.98078528040323043), (-0.55557023301960218), 0.83146961230254524,
  0.94154406518302081, (-0.33688985339222005), (-0.99879545620517241), (-0.049067674327418015),
  (-0.14673047445536175), (-0.98917650996478101), (-0.24298017990326387), 0.97003125319454397,
  0.77301045336273699, (-0.63439328416364549), (-0.95694033573220882), 0.29028467725446233,
  (-0.47139673682599764), (-0.88192126434835505), 0.098017140329560604, 0.99518472667219693,
  0.51410274419322166, (-0.85772861000027212), (-0.80320753148064494), 0.59569930449243336,
  (-0.74095112535495922), (-0.67155895484701833), 0.42755509343028208, 0.90398929312344334,
  1.0, 0.0, (-0.98078528040323043), (-0.19509032201612825),
  0.098017140329560604, (-0.99518472667219693), (-0.29028467725446233), 0.95694033573220882,
  0.93299279883473896, (-0.35989503653498811), (-0.98527764238894122), 0.17096188876030122,
  (-0.26671275747489837), (-0.96377606579543984), 0.073564563599667426, 0.99729045667869021,
  0.74095112535495922, (-0.67155895484701833), (-0.85772861000027212), 0.51410274419322166,
  (-0.59569930449243336), (-0.80320753148064494), 0.42755509343028208, 0.90398929312344334,
  0.44961132965460654, (-0.89322430119551532), (-0.61523159058062682), 0.78834642762660623,
  (-0.84485356524970712), (-0.53499761988709715), 0.724247082951467, 0.68954054473706683};

void ker_zmddft_fwd_256x256x256_cu0(sycl::nd_item<1> &item,
                                    double *__restrict T3,
                                    const double *__restrict D3,
                                    const double *__restrict X,
                                    double *__restrict P1) {
  double a495, a496, a497, a498, a499, a500, a501, a502,
         s145, s146, s147, s148, s149, s150, s151, s152,
         s153, s154, s155, s156, s157, s158, s159, s160,
         s161, s162, s163, s164, s165, s166, s167, s168,
         s169, s170, s171, s172, s173, s174, s175, s176,
         s177, s178, s179, s180, s181, s182, s183, s184,
         s185, s186, s187, s188, s189, s190, s191, s192,
         t538, t539, t540, t541, t542, t543, t544, t545,
         t546, t547, t548, t549, t550, t551, t552, t553,
         t554, t555, t556, t557, t558, t559, t560, t561,
         t562, t563, t564, t565, t566, t567, t568, t569,
         t570, t571, t572, t573, t574, t575, t576, t577,
         t578, t579, t580, t581, t582, t583, t584, t585,
         t586, t587, t588, t589, t590, t591, t592, t593,
         t594, t595, t596, t597, t598, t599, t600, t601,
         t602, t603, t604, t605, t606, t607, t608, t609,
         t610, t611, t612, t613, t614, t615, t616, t617,
         t618, t619, t620, t621, t622, t623, t624, t625;
  int a492, a493, a494, a503;
  int threadIdx_x = item.get_local_id(0);
  int blockIdx_x = item.get_group(0);
  a492 = (512*(threadIdx_x / 16));
  a493 = (threadIdx_x % 16);
  a494 = ((2048*blockIdx_x) + a492 + (2*a493));
  s145 = X[a494];
  s146 = X[(a494 + 1)];
  s147 = X[(a494 + 256)];
  s148 = X[(a494 + 257)];
  t538 = (s145 + s147);
  t539 = (s146 + s148);
  t540 = (s145 - s147);
  t541 = (s146 - s148);
  s149 = X[(a494 + 128)];
  s150 = X[(a494 + 129)];
  s151 = X[(a494 + 384)];
  s152 = X[(a494 + 385)];
  t542 = (s149 + s151);
  t543 = (s150 + s152);
  t544 = (s149 - s151);
  t545 = (s150 - s152);
  t546 = (t538 + t542);
  t547 = (t539 + t543);
  t548 = (t538 - t542);
  t549 = (t539 - t543);
  t550 = (t540 + t545);
  t551 = (t541 - t544);
  t552 = (t540 - t545);
  t553 = (t541 + t544);
  s153 = X[(a494 + 32)];
  s154 = X[(a494 + 33)];
  s155 = X[(a494 + 288)];
  s156 = X[(a494 + 289)];
  t554 = (s153 + s155);
  t555 = (s154 + s156);
  t556 = (s153 - s155);
  t557 = (s154 - s156);
  s157 = X[(a494 + 160)];
  s158 = X[(a494 + 161)];
  s159 = X[(a494 + 416)];
  s160 = X[(a494 + 417)];
  t558 = (s157 + s159);
  t559 = (s158 + s160);
  t560 = (s157 - s159);
  t561 = (s158 - s160);
  t562 = (t554 + t558);
  t563 = (t555 + t559);
  a495 = (0.70710678118654757*(t554 - t558));
  a496 = (0.70710678118654757*(t555 - t559));
  s161 = (a495 + a496);
  s162 = (a496 - a495);
  t564 = (t556 + t561);
  t565 = (t557 - t560);
  t566 = (t556 - t561);
  t567 = (t557 + t560);
  s163 = ((0.92387953251128674*t564) + (0.38268343236508978*t565));
  s164 = ((0.92387953251128674*t565) - (0.38268343236508978*t564));
  s165 = ((0.38268343236508978*t566) + (0.92387953251128674*t567));
  s166 = ((0.38268343236508978*t567) - (0.92387953251128674*t566));
  s167 = X[(a494 + 64)];
  s168 = X[(a494 + 65)];
  s169 = X[(a494 + 320)];
  s170 = X[(a494 + 321)];
  t568 = (s167 + s169);
  t569 = (s168 + s170);
  t570 = (s167 - s169);
  t571 = (s168 - s170);
  s171 = X[(a494 + 192)];
  s172 = X[(a494 + 193)];
  s173 = X[(a494 + 448)];
  s174 = X[(a494 + 449)];
  t572 = (s171 + s173);
  t573 = (s172 + s174);
  t574 = (s171 - s173);
  t575 = (s172 - s174);
  t576 = (t568 + t572);
  t577 = (t569 + t573);
  t578 = (t568 - t572);
  t579 = (t569 - t573);
  a497 = (0.70710678118654757*(t570 + t575));
  a498 = (0.70710678118654757*(t571 - t574));
  s175 = (a497 + a498);
  s176 = (a498 - a497);
  a499 = (0.70710678118654757*(t571 + t574));
  a500 = (0.70710678118654757*(t570 - t575));
  s177 = (a499 - a500);
  s178 = (a500 + a499);
  s179 = X[(a494 + 96)];
  s180 = X[(a494 + 97)];
  s181 = X[(a494 + 352)];
  s182 = X[(a494 + 353)];
  t580 = (s179 + s181);
  t581 = (s180 + s182);
  t582 = (s179 - s181);
  t583 = (s180 - s182);
  s183 = X[(a494 + 224)];
  s184 = X[(a494 + 225)];
  s185 = X[(a494 + 480)];
  s186 = X[(a494 + 481)];
  t584 = (s183 + s185);
  t585 = (s184 + s186);
  t586 = (s183 - s185);
  t587 = (s184 - s186);
  t588 = (t580 + t584);
  t589 = (t581 + t585);
  a501 = (0.70710678118654757*(t581 - t585));
  a502 = (0.70710678118654757*(t580 - t584));
  s187 = (a501 - a502);
  s188 = (a502 + a501);
  t590 = (t582 + t587);
  t591 = (t583 - t586);
  t592 = (t582 - t587);
  t593 = (t583 + t586);
  s189 = ((0.38268343236508978*t590) + (0.92387953251128674*t591));
  s190 = ((0.38268343236508978*t591) - (0.92387953251128674*t590));
  s191 = ((0.92387953251128674*t592) + (0.38268343236508978*t593));
  s192 = ((0.38268343236508978*t592) - (0.92387953251128674*t593));
  t594 = (t546 + t576);
  t595 = (t547 + t577);
  t596 = (t546 - t576);
  t597 = (t547 - t577);
  t598 = (t562 + t588);
  t599 = (t563 + t589);
  t600 = (t562 - t588);
  t601 = (t563 - t589);
  a503 = (a492 + (32*a493));
  T3[a503] = (t594 + t598);
  T3[(a503 + 1)] = (t595 + t599);
  T3[(a503 + 16)] = (t594 - t598);
  T3[(a503 + 17)] = (t595 - t599);
  T3[(a503 + 8)] = (t596 + t601);
  T3[(a503 + 9)] = (t597 - t600);
  T3[(a503 + 24)] = (t596 - t601);
  T3[(a503 + 25)] = (t597 + t600);
  t602 = (t550 + s175);
  t603 = (t551 + s176);
  t604 = (t550 - s175);
  t605 = (t551 - s176);
  t606 = (s163 + s189);
  t607 = (s164 + s190);
  t608 = (s163 - s189);
  t609 = (s164 - s190);
  T3[(a503 + 2)] = (t602 + t606);
  T3[(a503 + 3)] = (t603 + t607);
  T3[(a503 + 18)] = (t602 - t606);
  T3[(a503 + 19)] = (t603 - t607);
  T3[(a503 + 10)] = (t604 + t609);
  T3[(a503 + 11)] = (t605 - t608);
  T3[(a503 + 26)] = (t604 - t609);
  T3[(a503 + 27)] = (t605 + t608);
  t610 = (t548 + t579);
  t611 = (t549 - t578);
  t612 = (t548 - t579);
  t613 = (t549 + t578);
  t614 = (s161 + s187);
  t615 = (s162 - s188);
  t616 = (s161 - s187);
  t617 = (s162 + s188);
  T3[(a503 + 4)] = (t610 + t614);
  T3[(a503 + 5)] = (t611 + t615);
  T3[(a503 + 20)] = (t610 - t614);
  T3[(a503 + 21)] = (t611 - t615);
  T3[(a503 + 12)] = (t612 + t617);
  T3[(a503 + 13)] = (t613 - t616);
  T3[(a503 + 28)] = (t612 - t617);
  T3[(a503 + 29)] = (t613 + t616);
  t618 = (t552 + s177);
  t619 = (t553 - s178);
  t620 = (t552 - s177);
  t621 = (t553 + s178);
  t622 = (s165 - s191);
  t623 = (s166 + s192);
  t624 = (s165 + s191);
  t625 = (s166 - s192);
  T3[(a503 + 6)] = (t618 + t622);
  T3[(a503 + 7)] = (t619 + t623);
  T3[(a503 + 22)] = (t618 - t622);
  T3[(a503 + 23)] = (t619 - t623);
  T3[(a503 + 14)] = (t620 + t625);
  T3[(a503 + 15)] = (t621 - t624);
  T3[(a503 + 30)] = (t620 - t625);
  T3[(a503 + 31)] = (t621 + t624);
  __syncthreads();
  double a1478, a1479, a1480, a1481, a1482, a1483, a1484, a1485,
         a1486, a1487, a1488, a1489, a1490, a1491, a1492, a1493,
         a1494, a1495, a1496, a1497, a1498, a1499, a1500, a1501,
         a1502, a1503, a1504, a1505, a1506, a1507, a1508, a1509,
         a1510, a1511, a1512, a1513, a1514, a1515, a1516, a1517,
         s434, s435, s436, s437, s438, s439, s440, s441,
         s442, s443, s444, s445, s446, s447, s448, s449,
         s450, s451, s452, s453, s454, s455, s456, s457,
         s458, s459, s460, s461, s462, s463, s464, s465,
         s466, s467, s468, s469, s470, s471, s472, s473,
         s474, s475, s476, s477, s478, s479, s480, s481,
         s482, s483, s484, s485, s486, s487, s488, s489,
         s490, s491, s492, s493, s494, s495, s496, s497,
         s498, s499, s500, s501, s502, s503, s504, s505,
         s506, s507, s508, s509, s510, s511, s512, s513,
         t1000, t1001, t1002, t1003, t1004, t1005, t1006, t1007,
         t1008, t1009, t1010, t1011, t1012, t1013, t1014, t1015,
         t1016, t1017, t1018, t1019, t1020, t1021, t1022, t1023,
         t1024, t1025, t1026, t1027, t1028, t1029, t1030, t1031,
         t1032, t1033, t1034, t1035, t1036, t1037, t1038, t1039,
         t1040, t1041, t1042, t1043, t1044, t1045, t1046, t1047,
         t1048, t1049, t1050, t1051, t1052, t1053, t1054, t1055,
         t1056, t1057, t970, t971, t972, t973, t974, t975,
         t976, t977, t978, t979, t980, t981, t982, t983,
         t984, t985, t986, t987, t988, t989, t990, t991,
         t992, t993, t994, t995, t996, t997, t998, t999;
  int a1474, a1475, a1476, a1477, a1518;
  a1474 = (threadIdx_x / 16);
  a1475 = (threadIdx_x % 16);
  a1476 = ((512*a1474) + (2*a1475));
  s434 = T3[a1476];
  s435 = T3[(a1476 + 1)];
  s436 = T3[(a1476 + 256)];
  s437 = T3[(a1476 + 257)];
  a1477 = (32*a1475);
  a1478 = D3[a1477];
  a1479 = D3[(a1477 + 1)];
  s438 = ((a1478*s434) - (a1479*s435));
  s439 = ((a1479*s434) + (a1478*s435));
  a1480 = D3[(a1477 + 2)];
  a1481 = D3[(a1477 + 3)];
  s440 = ((a1480*s436) - (a1481*s437));
  s441 = ((a1481*s436) + (a1480*s437));
  t970 = (s438 + s440);
  t971 = (s439 + s441);
  t972 = (s438 - s440);
  t973 = (s439 - s441);
  s442 = T3[(a1476 + 128)];
  s443 = T3[(a1476 + 129)];
  s444 = T3[(a1476 + 384)];
  s445 = T3[(a1476 + 385)];
  a1482 = D3[(4 + a1477)];
  a1483 = D3[(5 + a1477)];
  s446 = ((a1482*s442) - (a1483*s443));
  s447 = ((a1483*s442) + (a1482*s443));
  a1484 = D3[(6 + a1477)];
  a1485 = D3[(7 + a1477)];
  s448 = ((a1484*s444) - (a1485*s445));
  s449 = ((a1485*s444) + (a1484*s445));
  t974 = (s446 + s448);
  t975 = (s447 + s449);
  t976 = (s446 - s448);
  t977 = (s447 - s449);
  t978 = (t970 + t974);
  t979 = (t971 + t975);
  t980 = (t970 - t974);
  t981 = (t971 - t975);
  t982 = (t972 + t977);
  t983 = (t973 - t976);
  t984 = (t972 - t977);
  t985 = (t973 + t976);
  s450 = T3[(a1476 + 32)];
  s451 = T3[(a1476 + 33)];
  s452 = T3[(a1476 + 288)];
  s453 = T3[(a1476 + 289)];
  a1486 = D3[(a1477 + 8)];
  a1487 = D3[(9 + a1477)];
  s454 = ((a1486*s450) - (a1487*s451));
  s455 = ((a1487*s450) + (a1486*s451));
  a1488 = D3[(10 + a1477)];
  a1489 = D3[(11 + a1477)];
  s456 = ((a1488*s452) - (a1489*s453));
  s457 = ((a1489*s452) + (a1488*s453));
  t986 = (s454 + s456);
  t987 = (s455 + s457);
  t988 = (s454 - s456);
  t989 = (s455 - s457);
  s458 = T3[(a1476 + 160)];
  s459 = T3[(a1476 + 161)];
  s460 = T3[(a1476 + 416)];
  s461 = T3[(a1476 + 417)];
  a1490 = D3[(12 + a1477)];
  a1491 = D3[(13 + a1477)];
  s462 = ((a1490*s458) - (a1491*s459));
  s463 = ((a1491*s458) + (a1490*s459));
  a1492 = D3[(14 + a1477)];
  a1493 = D3[(15 + a1477)];
  s464 = ((a1492*s460) - (a1493*s461));
  s465 = ((a1493*s460) + (a1492*s461));
  t990 = (s462 + s464);
  t991 = (s463 + s465);
  t992 = (s462 - s464);
  t993 = (s463 - s465);
  t994 = (t986 + t990);
  t995 = (t987 + t991);
  a1494 = (0.70710678118654757*(t986 - t990));
  a1495 = (0.70710678118654757*(t987 - t991));
  s466 = (a1494 + a1495);
  s467 = (a1495 - a1494);
  t996 = (t988 + t993);
  t997 = (t989 - t992);
  t998 = (t988 - t993);
  t999 = (t989 + t992);
  s468 = ((0.92387953251128674*t996) + (0.38268343236508978*t997));
  s469 = ((0.92387953251128674*t997) - (0.38268343236508978*t996));
  s470 = ((0.38268343236508978*t998) + (0.92387953251128674*t999));
  s471 = ((0.38268343236508978*t999) - (0.92387953251128674*t998));
  s472 = T3[(a1476 + 64)];
  s473 = T3[(a1476 + 65)];
  s474 = T3[(a1476 + 320)];
  s475 = T3[(a1476 + 321)];
  a1496 = D3[(a1477 + 16)];
  a1497 = D3[(17 + a1477)];
  s476 = ((a1496*s472) - (a1497*s473));
  s477 = ((a1497*s472) + (a1496*s473));
  a1498 = D3[(18 + a1477)];
  a1499 = D3[(19 + a1477)];
  s478 = ((a1498*s474) - (a1499*s475));
  s479 = ((a1499*s474) + (a1498*s475));
  t1000 = (s476 + s478);
  t1001 = (s477 + s479);
  t1002 = (s476 - s478);
  t1003 = (s477 - s479);
  s480 = T3[(a1476 + 192)];
  s481 = T3[(a1476 + 193)];
  s482 = T3[(a1476 + 448)];
  s483 = T3[(a1476 + 449)];
  a1500 = D3[(20 + a1477)];
  a1501 = D3[(21 + a1477)];
  s484 = ((a1500*s480) - (a1501*s481));
  s485 = ((a1501*s480) + (a1500*s481));
  a1502 = D3[(22 + a1477)];
  a1503 = D3[(23 + a1477)];
  s486 = ((a1502*s482) - (a1503*s483));
  s487 = ((a1503*s482) + (a1502*s483));
  t1004 = (s484 + s486);
  t1005 = (s485 + s487);
  t1006 = (s484 - s486);
  t1007 = (s485 - s487);
  t1008 = (t1000 + t1004);
  t1009 = (t1001 + t1005);
  t1010 = (t1000 - t1004);
  t1011 = (t1001 - t1005);
  a1504 = (0.70710678118654757*(t1002 + t1007));
  a1505 = (0.70710678118654757*(t1003 - t1006));
  s488 = (a1504 + a1505);
  s489 = (a1505 - a1504);
  a1506 = (0.70710678118654757*(t1003 + t1006));
  a1507 = (0.70710678118654757*(t1002 - t1007));
  s490 = (a1506 - a1507);
  s491 = (a1507 + a1506);
  s492 = T3[(a1476 + 96)];
  s493 = T3[(a1476 + 97)];
  s494 = T3[(a1476 + 352)];
  s495 = T3[(a1476 + 353)];
  a1508 = D3[(a1477 + 24)];
  a1509 = D3[(25 + a1477)];
  s496 = ((a1508*s492) - (a1509*s493));
  s497 = ((a1509*s492) + (a1508*s493));
  a1510 = D3[(26 + a1477)];
  a1511 = D3[(27 + a1477)];
  s498 = ((a1510*s494) - (a1511*s495));
  s499 = ((a1511*s494) + (a1510*s495));
  t1012 = (s496 + s498);
  t1013 = (s497 + s499);
  t1014 = (s496 - s498);
  t1015 = (s497 - s499);
  s500 = T3[(a1476 + 224)];
  s501 = T3[(a1476 + 225)];
  s502 = T3[(a1476 + 480)];
  s503 = T3[(a1476 + 481)];
  a1512 = D3[(28 + a1477)];
  a1513 = D3[(29 + a1477)];
  s504 = ((a1512*s500) - (a1513*s501));
  s505 = ((a1513*s500) + (a1512*s501));
  a1514 = D3[(30 + a1477)];
  a1515 = D3[(31 + a1477)];
  s506 = ((a1514*s502) - (a1515*s503));
  s507 = ((a1515*s502) + (a1514*s503));
  t1016 = (s504 + s506);
  t1017 = (s505 + s507);
  t1018 = (s504 - s506);
  t1019 = (s505 - s507);
  t1020 = (t1012 + t1016);
  t1021 = (t1013 + t1017);
  a1516 = (0.70710678118654757*(t1013 - t1017));
  a1517 = (0.70710678118654757*(t1012 - t1016));
  s508 = (a1516 - a1517);
  s509 = (a1517 + a1516);
  t1022 = (t1014 + t1019);
  t1023 = (t1015 - t1018);
  t1024 = (t1014 - t1019);
  t1025 = (t1015 + t1018);
  s510 = ((0.38268343236508978*t1022) + (0.92387953251128674*t1023));
  s511 = ((0.38268343236508978*t1023) - (0.92387953251128674*t1022));
  s512 = ((0.92387953251128674*t1024) + (0.38268343236508978*t1025));
  s513 = ((0.38268343236508978*t1024) - (0.92387953251128674*t1025));
  t1026 = (t978 + t1008);
  t1027 = (t979 + t1009);
  t1028 = (t978 - t1008);
  t1029 = (t979 - t1009);
  t1030 = (t994 + t1020);
  t1031 = (t995 + t1021);
  t1032 = (t994 - t1020);
  t1033 = (t995 - t1021);
  a1518 = ((8*blockIdx_x) + (131072*a1475) + (2*a1474));
  P1[a1518] = (t1026 + t1030);
  P1[(a1518 + 1)] = (t1027 + t1031);
  P1[(a1518 + 16777216)] = (t1026 - t1030);
  P1[(a1518 + 16777217)] = (t1027 - t1031);
  P1[(a1518 + 8388608)] = (t1028 + t1033);
  P1[(a1518 + 8388609)] = (t1029 - t1032);
  P1[(a1518 + 25165824)] = (t1028 - t1033);
  P1[(a1518 + 25165825)] = (t1029 + t1032);
  t1034 = (t982 + s488);
  t1035 = (t983 + s489);
  t1036 = (t982 - s488);
  t1037 = (t983 - s489);
  t1038 = (s468 + s510);
  t1039 = (s469 + s511);
  t1040 = (s468 - s510);
  t1041 = (s469 - s511);
  P1[(a1518 + 2097152)] = (t1034 + t1038);
  P1[(a1518 + 2097153)] = (t1035 + t1039);
  P1[(a1518 + 18874368)] = (t1034 - t1038);
  P1[(a1518 + 18874369)] = (t1035 - t1039);
  P1[(a1518 + 10485760)] = (t1036 + t1041);
  P1[(a1518 + 10485761)] = (t1037 - t1040);
  P1[(a1518 + 27262976)] = (t1036 - t1041);
  P1[(a1518 + 27262977)] = (t1037 + t1040);
  t1042 = (t980 + t1011);
  t1043 = (t981 - t1010);
  t1044 = (t980 - t1011);
  t1045 = (t981 + t1010);
  t1046 = (s466 + s508);
  t1047 = (s467 - s509);
  t1048 = (s466 - s508);
  t1049 = (s467 + s509);
  P1[(a1518 + 4194304)] = (t1042 + t1046);
  P1[(a1518 + 4194305)] = (t1043 + t1047);
  P1[(a1518 + 20971520)] = (t1042 - t1046);
  P1[(a1518 + 20971521)] = (t1043 - t1047);
  P1[(a1518 + 12582912)] = (t1044 + t1049);
  P1[(a1518 + 12582913)] = (t1045 - t1048);
  P1[(a1518 + 29360128)] = (t1044 - t1049);
  P1[(a1518 + 29360129)] = (t1045 + t1048);
  t1050 = (t984 + s490);
  t1051 = (t985 - s491);
  t1052 = (t984 - s490);
  t1053 = (t985 + s491);
  t1054 = (s470 - s512);
  t1055 = (s471 + s513);
  t1056 = (s470 + s512);
  t1057 = (s471 - s513);
  P1[(a1518 + 6291456)] = (t1050 + t1054);
  P1[(a1518 + 6291457)] = (t1051 + t1055);
  P1[(a1518 + 23068672)] = (t1050 - t1054);
  P1[(a1518 + 23068673)] = (t1051 - t1055);
  P1[(a1518 + 14680064)] = (t1052 + t1057);
  P1[(a1518 + 14680065)] = (t1053 - t1056);
  P1[(a1518 + 31457280)] = (t1052 - t1057);
  P1[(a1518 + 31457281)] = (t1053 + t1056);
  __syncthreads();
}

void ker_zmddft_fwd_256x256x256_cu1(sycl::nd_item<1> &item,
                                    double *__restrict T33,
                                    const double *__restrict D3,
                                    const double *__restrict P1,
                                    double *__restrict P2)
{
  double a2012, a2013, a2014, a2015, a2016, a2017, a2018, a2019,
         s658, s659, s660, s661, s662, s663, s664, s665,
         s666, s667, s668, s669, s670, s671, s672, s673,
         s674, s675, s676, s677, s678, s679, s680, s681,
         s682, s683, s684, s685, s686, s687, s688, s689,
         s690, s691, s692, s693, s694, s695, s696, s697,
         s698, s699, s700, s701, s702, s703, s704, s705,
         t1402, t1403, t1404, t1405, t1406, t1407, t1408, t1409,
         t1410, t1411, t1412, t1413, t1414, t1415, t1416, t1417,
         t1418, t1419, t1420, t1421, t1422, t1423, t1424, t1425,
         t1426, t1427, t1428, t1429, t1430, t1431, t1432, t1433,
         t1434, t1435, t1436, t1437, t1438, t1439, t1440, t1441,
         t1442, t1443, t1444, t1445, t1446, t1447, t1448, t1449,
         t1450, t1451, t1452, t1453, t1454, t1455, t1456, t1457,
         t1458, t1459, t1460, t1461, t1462, t1463, t1464, t1465,
         t1466, t1467, t1468, t1469, t1470, t1471, t1472, t1473,
         t1474, t1475, t1476, t1477, t1478, t1479, t1480, t1481,
         t1482, t1483, t1484, t1485, t1486, t1487, t1488, t1489;
  int a2009, a2010, a2011, a2020;
  int threadIdx_x = item.get_local_id(0);
  int blockIdx_x = item.get_group(0);
  a2009 = (512*(threadIdx_x / 16));
  a2010 = (threadIdx_x % 16);
  a2011 = ((2048*blockIdx_x) + a2009 + (2*a2010));
  s658 = P1[a2011];
  s659 = P1[(a2011 + 1)];
  s660 = P1[(a2011 + 256)];
  s661 = P1[(a2011 + 257)];
  t1402 = (s658 + s660);
  t1403 = (s659 + s661);
  t1404 = (s658 - s660);
  t1405 = (s659 - s661);
  s662 = P1[(a2011 + 128)];
  s663 = P1[(a2011 + 129)];
  s664 = P1[(a2011 + 384)];
  s665 = P1[(a2011 + 385)];
  t1406 = (s662 + s664);
  t1407 = (s663 + s665);
  t1408 = (s662 - s664);
  t1409 = (s663 - s665);
  t1410 = (t1402 + t1406);
  t1411 = (t1403 + t1407);
  t1412 = (t1402 - t1406);
  t1413 = (t1403 - t1407);
  t1414 = (t1404 + t1409);
  t1415 = (t1405 - t1408);
  t1416 = (t1404 - t1409);
  t1417 = (t1405 + t1408);
  s666 = P1[(a2011 + 32)];
  s667 = P1[(a2011 + 33)];
  s668 = P1[(a2011 + 288)];
  s669 = P1[(a2011 + 289)];
  t1418 = (s666 + s668);
  t1419 = (s667 + s669);
  t1420 = (s666 - s668);
  t1421 = (s667 - s669);
  s670 = P1[(a2011 + 160)];
  s671 = P1[(a2011 + 161)];
  s672 = P1[(a2011 + 416)];
  s673 = P1[(a2011 + 417)];
  t1422 = (s670 + s672);
  t1423 = (s671 + s673);
  t1424 = (s670 - s672);
  t1425 = (s671 - s673);
  t1426 = (t1418 + t1422);
  t1427 = (t1419 + t1423);
  a2012 = (0.70710678118654757*(t1418 - t1422));
  a2013 = (0.70710678118654757*(t1419 - t1423));
  s674 = (a2012 + a2013);
  s675 = (a2013 - a2012);
  t1428 = (t1420 + t1425);
  t1429 = (t1421 - t1424);
  t1430 = (t1420 - t1425);
  t1431 = (t1421 + t1424);
  s676 = ((0.92387953251128674*t1428) + (0.38268343236508978*t1429));
  s677 = ((0.92387953251128674*t1429) - (0.38268343236508978*t1428));
  s678 = ((0.38268343236508978*t1430) + (0.92387953251128674*t1431));
  s679 = ((0.38268343236508978*t1431) - (0.92387953251128674*t1430));
  s680 = P1[(a2011 + 64)];
  s681 = P1[(a2011 + 65)];
  s682 = P1[(a2011 + 320)];
  s683 = P1[(a2011 + 321)];
  t1432 = (s680 + s682);
  t1433 = (s681 + s683);
  t1434 = (s680 - s682);
  t1435 = (s681 - s683);
  s684 = P1[(a2011 + 192)];
  s685 = P1[(a2011 + 193)];
  s686 = P1[(a2011 + 448)];
  s687 = P1[(a2011 + 449)];
  t1436 = (s684 + s686);
  t1437 = (s685 + s687);
  t1438 = (s684 - s686);
  t1439 = (s685 - s687);
  t1440 = (t1432 + t1436);
  t1441 = (t1433 + t1437);
  t1442 = (t1432 - t1436);
  t1443 = (t1433 - t1437);
  a2014 = (0.70710678118654757*(t1434 + t1439));
  a2015 = (0.70710678118654757*(t1435 - t1438));
  s688 = (a2014 + a2015);
  s689 = (a2015 - a2014);
  a2016 = (0.70710678118654757*(t1435 + t1438));
  a2017 = (0.70710678118654757*(t1434 - t1439));
  s690 = (a2016 - a2017);
  s691 = (a2017 + a2016);
  s692 = P1[(a2011 + 96)];
  s693 = P1[(a2011 + 97)];
  s694 = P1[(a2011 + 352)];
  s695 = P1[(a2011 + 353)];
  t1444 = (s692 + s694);
  t1445 = (s693 + s695);
  t1446 = (s692 - s694);
  t1447 = (s693 - s695);
  s696 = P1[(a2011 + 224)];
  s697 = P1[(a2011 + 225)];
  s698 = P1[(a2011 + 480)];
  s699 = P1[(a2011 + 481)];
  t1448 = (s696 + s698);
  t1449 = (s697 + s699);
  t1450 = (s696 - s698);
  t1451 = (s697 - s699);
  t1452 = (t1444 + t1448);
  t1453 = (t1445 + t1449);
  a2018 = (0.70710678118654757*(t1445 - t1449));
  a2019 = (0.70710678118654757*(t1444 - t1448));
  s700 = (a2018 - a2019);
  s701 = (a2019 + a2018);
  t1454 = (t1446 + t1451);
  t1455 = (t1447 - t1450);
  t1456 = (t1446 - t1451);
  t1457 = (t1447 + t1450);
  s702 = ((0.38268343236508978*t1454) + (0.92387953251128674*t1455));
  s703 = ((0.38268343236508978*t1455) - (0.92387953251128674*t1454));
  s704 = ((0.92387953251128674*t1456) + (0.38268343236508978*t1457));
  s705 = ((0.38268343236508978*t1456) - (0.92387953251128674*t1457));
  t1458 = (t1410 + t1440);
  t1459 = (t1411 + t1441);
  t1460 = (t1410 - t1440);
  t1461 = (t1411 - t1441);
  t1462 = (t1426 + t1452);
  t1463 = (t1427 + t1453);
  t1464 = (t1426 - t1452);
  t1465 = (t1427 - t1453);
  a2020 = (a2009 + (32*a2010));
  T33[a2020] = (t1458 + t1462);
  T33[(a2020 + 1)] = (t1459 + t1463);
  T33[(a2020 + 16)] = (t1458 - t1462);
  T33[(a2020 + 17)] = (t1459 - t1463);
  T33[(a2020 + 8)] = (t1460 + t1465);
  T33[(a2020 + 9)] = (t1461 - t1464);
  T33[(a2020 + 24)] = (t1460 - t1465);
  T33[(a2020 + 25)] = (t1461 + t1464);
  t1466 = (t1414 + s688);
  t1467 = (t1415 + s689);
  t1468 = (t1414 - s688);
  t1469 = (t1415 - s689);
  t1470 = (s676 + s702);
  t1471 = (s677 + s703);
  t1472 = (s676 - s702);
  t1473 = (s677 - s703);
  T33[(a2020 + 2)] = (t1466 + t1470);
  T33[(a2020 + 3)] = (t1467 + t1471);
  T33[(a2020 + 18)] = (t1466 - t1470);
  T33[(a2020 + 19)] = (t1467 - t1471);
  T33[(a2020 + 10)] = (t1468 + t1473);
  T33[(a2020 + 11)] = (t1469 - t1472);
  T33[(a2020 + 26)] = (t1468 - t1473);
  T33[(a2020 + 27)] = (t1469 + t1472);
  t1474 = (t1412 + t1443);
  t1475 = (t1413 - t1442);
  t1476 = (t1412 - t1443);
  t1477 = (t1413 + t1442);
  t1478 = (s674 + s700);
  t1479 = (s675 - s701);
  t1480 = (s674 - s700);
  t1481 = (s675 + s701);
  T33[(a2020 + 4)] = (t1474 + t1478);
  T33[(a2020 + 5)] = (t1475 + t1479);
  T33[(a2020 + 20)] = (t1474 - t1478);
  T33[(a2020 + 21)] = (t1475 - t1479);
  T33[(a2020 + 12)] = (t1476 + t1481);
  T33[(a2020 + 13)] = (t1477 - t1480);
  T33[(a2020 + 28)] = (t1476 - t1481);
  T33[(a2020 + 29)] = (t1477 + t1480);
  t1482 = (t1416 + s690);
  t1483 = (t1417 - s691);
  t1484 = (t1416 - s690);
  t1485 = (t1417 + s691);
  t1486 = (s678 - s704);
  t1487 = (s679 + s705);
  t1488 = (s678 + s704);
  t1489 = (s679 - s705);
  T33[(a2020 + 6)] = (t1482 + t1486);
  T33[(a2020 + 7)] = (t1483 + t1487);
  T33[(a2020 + 22)] = (t1482 - t1486);
  T33[(a2020 + 23)] = (t1483 - t1487);
  T33[(a2020 + 14)] = (t1484 + t1489);
  T33[(a2020 + 15)] = (t1485 - t1488);
  T33[(a2020 + 30)] = (t1484 - t1489);
  T33[(a2020 + 31)] = (t1485 + t1488);
  __syncthreads();
  double a2995, a2996, a2997, a2998, a2999, a3000, a3001, a3002,
         a3003, a3004, a3005, a3006, a3007, a3008, a3009, a3010,
         a3011, a3012, a3013, a3014, a3015, a3016, a3017, a3018,
         a3019, a3020, a3021, a3022, a3023, a3024, a3025, a3026,
         a3027, a3028, a3029, a3030, a3031, a3032, a3033, a3034,
         s1000, s1001, s1002, s1003, s1004, s1005, s1006, s1007,
         s1008, s1009, s1010, s1011, s1012, s1013, s1014, s1015,
         s1016, s1017, s1018, s1019, s1020, s1021, s1022, s1023,
         s1024, s1025, s946, s947, s948, s949, s950, s951,
         s952, s953, s954, s955, s956, s957, s958, s959,
         s960, s961, s962, s963, s964, s965, s966, s967,
         s968, s969, s970, s971, s972, s973, s974, s975,
         s976, s977, s978, s979, s980, s981, s982, s983,
         s984, s985, s986, s987, s988, s989, s990, s991,
         s992, s993, s994, s995, s996, s997, s998, s999,
         t1834, t1835, t1836, t1837, t1838, t1839, t1840, t1841,
         t1842, t1843, t1844, t1845, t1846, t1847, t1848, t1849,
         t1850, t1851, t1852, t1853, t1854, t1855, t1856, t1857,
         t1858, t1859, t1860, t1861, t1862, t1863, t1864, t1865,
         t1866, t1867, t1868, t1869, t1870, t1871, t1872, t1873,
         t1874, t1875, t1876, t1877, t1878, t1879, t1880, t1881,
         t1882, t1883, t1884, t1885, t1886, t1887, t1888, t1889,
         t1890, t1891, t1892, t1893, t1894, t1895, t1896, t1897,
         t1898, t1899, t1900, t1901, t1902, t1903, t1904, t1905,
         t1906, t1907, t1908, t1909, t1910, t1911, t1912, t1913,
         t1914, t1915, t1916, t1917, t1918, t1919, t1920, t1921;
  int a2991, a2992, a2993, a2994, a3035;
  a2991 = (threadIdx_x / 16);
  a2992 = (threadIdx_x % 16);
  a2993 = ((512*a2991) + (2*a2992));
  s946 = T33[a2993];
  s947 = T33[(a2993 + 1)];
  s948 = T33[(a2993 + 256)];
  s949 = T33[(a2993 + 257)];
  a2994 = (32*a2992);
  a2995 = D3[a2994];
  a2996 = D3[(a2994 + 1)];
  s950 = ((a2995*s946) - (a2996*s947));
  s951 = ((a2996*s946) + (a2995*s947));
  a2997 = D3[(a2994 + 2)];
  a2998 = D3[(a2994 + 3)];
  s952 = ((a2997*s948) - (a2998*s949));
  s953 = ((a2998*s948) + (a2997*s949));
  t1834 = (s950 + s952);
  t1835 = (s951 + s953);
  t1836 = (s950 - s952);
  t1837 = (s951 - s953);
  s954 = T33[(a2993 + 128)];
  s955 = T33[(a2993 + 129)];
  s956 = T33[(a2993 + 384)];
  s957 = T33[(a2993 + 385)];
  a2999 = D3[(4 + a2994)];
  a3000 = D3[(5 + a2994)];
  s958 = ((a2999*s954) - (a3000*s955));
  s959 = ((a3000*s954) + (a2999*s955));
  a3001 = D3[(6 + a2994)];
  a3002 = D3[(7 + a2994)];
  s960 = ((a3001*s956) - (a3002*s957));
  s961 = ((a3002*s956) + (a3001*s957));
  t1838 = (s958 + s960);
  t1839 = (s959 + s961);
  t1840 = (s958 - s960);
  t1841 = (s959 - s961);
  t1842 = (t1834 + t1838);
  t1843 = (t1835 + t1839);
  t1844 = (t1834 - t1838);
  t1845 = (t1835 - t1839);
  t1846 = (t1836 + t1841);
  t1847 = (t1837 - t1840);
  t1848 = (t1836 - t1841);
  t1849 = (t1837 + t1840);
  s962 = T33[(a2993 + 32)];
  s963 = T33[(a2993 + 33)];
  s964 = T33[(a2993 + 288)];
  s965 = T33[(a2993 + 289)];
  a3003 = D3[(a2994 + 8)];
  a3004 = D3[(9 + a2994)];
  s966 = ((a3003*s962) - (a3004*s963));
  s967 = ((a3004*s962) + (a3003*s963));
  a3005 = D3[(10 + a2994)];
  a3006 = D3[(11 + a2994)];
  s968 = ((a3005*s964) - (a3006*s965));
  s969 = ((a3006*s964) + (a3005*s965));
  t1850 = (s966 + s968);
  t1851 = (s967 + s969);
  t1852 = (s966 - s968);
  t1853 = (s967 - s969);
  s970 = T33[(a2993 + 160)];
  s971 = T33[(a2993 + 161)];
  s972 = T33[(a2993 + 416)];
  s973 = T33[(a2993 + 417)];
  a3007 = D3[(12 + a2994)];
  a3008 = D3[(13 + a2994)];
  s974 = ((a3007*s970) - (a3008*s971));
  s975 = ((a3008*s970) + (a3007*s971));
  a3009 = D3[(14 + a2994)];
  a3010 = D3[(15 + a2994)];
  s976 = ((a3009*s972) - (a3010*s973));
  s977 = ((a3010*s972) + (a3009*s973));
  t1854 = (s974 + s976);
  t1855 = (s975 + s977);
  t1856 = (s974 - s976);
  t1857 = (s975 - s977);
  t1858 = (t1850 + t1854);
  t1859 = (t1851 + t1855);
  a3011 = (0.70710678118654757*(t1850 - t1854));
  a3012 = (0.70710678118654757*(t1851 - t1855));
  s978 = (a3011 + a3012);
  s979 = (a3012 - a3011);
  t1860 = (t1852 + t1857);
  t1861 = (t1853 - t1856);
  t1862 = (t1852 - t1857);
  t1863 = (t1853 + t1856);
  s980 = ((0.92387953251128674*t1860) + (0.38268343236508978*t1861));
  s981 = ((0.92387953251128674*t1861) - (0.38268343236508978*t1860));
  s982 = ((0.38268343236508978*t1862) + (0.92387953251128674*t1863));
  s983 = ((0.38268343236508978*t1863) - (0.92387953251128674*t1862));
  s984 = T33[(a2993 + 64)];
  s985 = T33[(a2993 + 65)];
  s986 = T33[(a2993 + 320)];
  s987 = T33[(a2993 + 321)];
  a3013 = D3[(a2994 + 16)];
  a3014 = D3[(17 + a2994)];
  s988 = ((a3013*s984) - (a3014*s985));
  s989 = ((a3014*s984) + (a3013*s985));
  a3015 = D3[(18 + a2994)];
  a3016 = D3[(19 + a2994)];
  s990 = ((a3015*s986) - (a3016*s987));
  s991 = ((a3016*s986) + (a3015*s987));
  t1864 = (s988 + s990);
  t1865 = (s989 + s991);
  t1866 = (s988 - s990);
  t1867 = (s989 - s991);
  s992 = T33[(a2993 + 192)];
  s993 = T33[(a2993 + 193)];
  s994 = T33[(a2993 + 448)];
  s995 = T33[(a2993 + 449)];
  a3017 = D3[(20 + a2994)];
  a3018 = D3[(21 + a2994)];
  s996 = ((a3017*s992) - (a3018*s993));
  s997 = ((a3018*s992) + (a3017*s993));
  a3019 = D3[(22 + a2994)];
  a3020 = D3[(23 + a2994)];
  s998 = ((a3019*s994) - (a3020*s995));
  s999 = ((a3020*s994) + (a3019*s995));
  t1868 = (s996 + s998);
  t1869 = (s997 + s999);
  t1870 = (s996 - s998);
  t1871 = (s997 - s999);
  t1872 = (t1864 + t1868);
  t1873 = (t1865 + t1869);
  t1874 = (t1864 - t1868);
  t1875 = (t1865 - t1869);
  a3021 = (0.70710678118654757*(t1866 + t1871));
  a3022 = (0.70710678118654757*(t1867 - t1870));
  s1000 = (a3021 + a3022);
  s1001 = (a3022 - a3021);
  a3023 = (0.70710678118654757*(t1867 + t1870));
  a3024 = (0.70710678118654757*(t1866 - t1871));
  s1002 = (a3023 - a3024);
  s1003 = (a3024 + a3023);
  s1004 = T33[(a2993 + 96)];
  s1005 = T33[(a2993 + 97)];
  s1006 = T33[(a2993 + 352)];
  s1007 = T33[(a2993 + 353)];
  a3025 = D3[(a2994 + 24)];
  a3026 = D3[(25 + a2994)];
  s1008 = ((a3025*s1004) - (a3026*s1005));
  s1009 = ((a3026*s1004) + (a3025*s1005));
  a3027 = D3[(26 + a2994)];
  a3028 = D3[(27 + a2994)];
  s1010 = ((a3027*s1006) - (a3028*s1007));
  s1011 = ((a3028*s1006) + (a3027*s1007));
  t1876 = (s1008 + s1010);
  t1877 = (s1009 + s1011);
  t1878 = (s1008 - s1010);
  t1879 = (s1009 - s1011);
  s1012 = T33[(a2993 + 224)];
  s1013 = T33[(a2993 + 225)];
  s1014 = T33[(a2993 + 480)];
  s1015 = T33[(a2993 + 481)];
  a3029 = D3[(28 + a2994)];
  a3030 = D3[(29 + a2994)];
  s1016 = ((a3029*s1012) - (a3030*s1013));
  s1017 = ((a3030*s1012) + (a3029*s1013));
  a3031 = D3[(30 + a2994)];
  a3032 = D3[(31 + a2994)];
  s1018 = ((a3031*s1014) - (a3032*s1015));
  s1019 = ((a3032*s1014) + (a3031*s1015));
  t1880 = (s1016 + s1018);
  t1881 = (s1017 + s1019);
  t1882 = (s1016 - s1018);
  t1883 = (s1017 - s1019);
  t1884 = (t1876 + t1880);
  t1885 = (t1877 + t1881);
  a3033 = (0.70710678118654757*(t1877 - t1881));
  a3034 = (0.70710678118654757*(t1876 - t1880));
  s1020 = (a3033 - a3034);
  s1021 = (a3034 + a3033);
  t1886 = (t1878 + t1883);
  t1887 = (t1879 - t1882);
  t1888 = (t1878 - t1883);
  t1889 = (t1879 + t1882);
  s1022 = ((0.38268343236508978*t1886) + (0.92387953251128674*t1887));
  s1023 = ((0.38268343236508978*t1887) - (0.92387953251128674*t1886));
  s1024 = ((0.92387953251128674*t1888) + (0.38268343236508978*t1889));
  s1025 = ((0.38268343236508978*t1888) - (0.92387953251128674*t1889));
  t1890 = (t1842 + t1872);
  t1891 = (t1843 + t1873);
  t1892 = (t1842 - t1872);
  t1893 = (t1843 - t1873);
  t1894 = (t1858 + t1884);
  t1895 = (t1859 + t1885);
  t1896 = (t1858 - t1884);
  t1897 = (t1859 - t1885);
  a3035 = ((8*blockIdx_x) + (131072*a2992) + (2*a2991));
  P2[a3035] = (t1890 + t1894);
  P2[(a3035 + 1)] = (t1891 + t1895);
  P2[(a3035 + 16777216)] = (t1890 - t1894);
  P2[(a3035 + 16777217)] = (t1891 - t1895);
  P2[(a3035 + 8388608)] = (t1892 + t1897);
  P2[(a3035 + 8388609)] = (t1893 - t1896);
  P2[(a3035 + 25165824)] = (t1892 - t1897);
  P2[(a3035 + 25165825)] = (t1893 + t1896);
  t1898 = (t1846 + s1000);
  t1899 = (t1847 + s1001);
  t1900 = (t1846 - s1000);
  t1901 = (t1847 - s1001);
  t1902 = (s980 + s1022);
  t1903 = (s981 + s1023);
  t1904 = (s980 - s1022);
  t1905 = (s981 - s1023);
  P2[(a3035 + 2097152)] = (t1898 + t1902);
  P2[(a3035 + 2097153)] = (t1899 + t1903);
  P2[(a3035 + 18874368)] = (t1898 - t1902);
  P2[(a3035 + 18874369)] = (t1899 - t1903);
  P2[(a3035 + 10485760)] = (t1900 + t1905);
  P2[(a3035 + 10485761)] = (t1901 - t1904);
  P2[(a3035 + 27262976)] = (t1900 - t1905);
  P2[(a3035 + 27262977)] = (t1901 + t1904);
  t1906 = (t1844 + t1875);
  t1907 = (t1845 - t1874);
  t1908 = (t1844 - t1875);
  t1909 = (t1845 + t1874);
  t1910 = (s978 + s1020);
  t1911 = (s979 - s1021);
  t1912 = (s978 - s1020);
  t1913 = (s979 + s1021);
  P2[(a3035 + 4194304)] = (t1906 + t1910);
  P2[(a3035 + 4194305)] = (t1907 + t1911);
  P2[(a3035 + 20971520)] = (t1906 - t1910);
  P2[(a3035 + 20971521)] = (t1907 - t1911);
  P2[(a3035 + 12582912)] = (t1908 + t1913);
  P2[(a3035 + 12582913)] = (t1909 - t1912);
  P2[(a3035 + 29360128)] = (t1908 - t1913);
  P2[(a3035 + 29360129)] = (t1909 + t1912);
  t1914 = (t1848 + s1002);
  t1915 = (t1849 - s1003);
  t1916 = (t1848 - s1002);
  t1917 = (t1849 + s1003);
  t1918 = (s982 - s1024);
  t1919 = (s983 + s1025);
  t1920 = (s982 + s1024);
  t1921 = (s983 - s1025);
  P2[(a3035 + 6291456)] = (t1914 + t1918);
  P2[(a3035 + 6291457)] = (t1915 + t1919);
  P2[(a3035 + 23068672)] = (t1914 - t1918);
  P2[(a3035 + 23068673)] = (t1915 - t1919);
  P2[(a3035 + 14680064)] = (t1916 + t1921);
  P2[(a3035 + 14680065)] = (t1917 - t1920);
  P2[(a3035 + 31457280)] = (t1916 - t1921);
  P2[(a3035 + 31457281)] = (t1917 + t1920);
  __syncthreads();
}

void ker_zmddft_fwd_256x256x256_cu2(sycl::nd_item<1> &item,
                                    double *__restrict T63,
                                    const double *__restrict D3,
                                    const double *__restrict P2,
                                    double *__restrict Y)
{
  double a3529, a3530, a3531, a3532, a3533, a3534, a3535, a3536,
         s1170, s1171, s1172, s1173, s1174, s1175, s1176, s1177,
         s1178, s1179, s1180, s1181, s1182, s1183, s1184, s1185,
         s1186, s1187, s1188, s1189, s1190, s1191, s1192, s1193,
         s1194, s1195, s1196, s1197, s1198, s1199, s1200, s1201,
         s1202, s1203, s1204, s1205, s1206, s1207, s1208, s1209,
         s1210, s1211, s1212, s1213, s1214, s1215, s1216, s1217,
         t2266, t2267, t2268, t2269, t2270, t2271, t2272, t2273,
         t2274, t2275, t2276, t2277, t2278, t2279, t2280, t2281,
         t2282, t2283, t2284, t2285, t2286, t2287, t2288, t2289,
         t2290, t2291, t2292, t2293, t2294, t2295, t2296, t2297,
         t2298, t2299, t2300, t2301, t2302, t2303, t2304, t2305,
         t2306, t2307, t2308, t2309, t2310, t2311, t2312, t2313,
         t2314, t2315, t2316, t2317, t2318, t2319, t2320, t2321,
         t2322, t2323, t2324, t2325, t2326, t2327, t2328, t2329,
         t2330, t2331, t2332, t2333, t2334, t2335, t2336, t2337,
         t2338, t2339, t2340, t2341, t2342, t2343, t2344, t2345,
         t2346, t2347, t2348, t2349, t2350, t2351, t2352, t2353;
  int a3526, a3527, a3528, a3537;
  int threadIdx_x = item.get_local_id(0);
  int blockIdx_x = item.get_group(0);
  a3526 = (512*(threadIdx_x / 16));
  a3527 = (threadIdx_x % 16);
  a3528 = ((2048*blockIdx_x) + a3526 + (2*a3527));
  s1170 = P2[a3528];
  s1171 = P2[(a3528 + 1)];
  s1172 = P2[(a3528 + 256)];
  s1173 = P2[(a3528 + 257)];
  t2266 = (s1170 + s1172);
  t2267 = (s1171 + s1173);
  t2268 = (s1170 - s1172);
  t2269 = (s1171 - s1173);
  s1174 = P2[(a3528 + 128)];
  s1175 = P2[(a3528 + 129)];
  s1176 = P2[(a3528 + 384)];
  s1177 = P2[(a3528 + 385)];
  t2270 = (s1174 + s1176);
  t2271 = (s1175 + s1177);
  t2272 = (s1174 - s1176);
  t2273 = (s1175 - s1177);
  t2274 = (t2266 + t2270);
  t2275 = (t2267 + t2271);
  t2276 = (t2266 - t2270);
  t2277 = (t2267 - t2271);
  t2278 = (t2268 + t2273);
  t2279 = (t2269 - t2272);
  t2280 = (t2268 - t2273);
  t2281 = (t2269 + t2272);
  s1178 = P2[(a3528 + 32)];
  s1179 = P2[(a3528 + 33)];
  s1180 = P2[(a3528 + 288)];
  s1181 = P2[(a3528 + 289)];
  t2282 = (s1178 + s1180);
  t2283 = (s1179 + s1181);
  t2284 = (s1178 - s1180);
  t2285 = (s1179 - s1181);
  s1182 = P2[(a3528 + 160)];
  s1183 = P2[(a3528 + 161)];
  s1184 = P2[(a3528 + 416)];
  s1185 = P2[(a3528 + 417)];
  t2286 = (s1182 + s1184);
  t2287 = (s1183 + s1185);
  t2288 = (s1182 - s1184);
  t2289 = (s1183 - s1185);
  t2290 = (t2282 + t2286);
  t2291 = (t2283 + t2287);
  a3529 = (0.70710678118654757*(t2282 - t2286));
  a3530 = (0.70710678118654757*(t2283 - t2287));
  s1186 = (a3529 + a3530);
  s1187 = (a3530 - a3529);
  t2292 = (t2284 + t2289);
  t2293 = (t2285 - t2288);
  t2294 = (t2284 - t2289);
  t2295 = (t2285 + t2288);
  s1188 = ((0.92387953251128674*t2292) + (0.38268343236508978*t2293));
  s1189 = ((0.92387953251128674*t2293) - (0.38268343236508978*t2292));
  s1190 = ((0.38268343236508978*t2294) + (0.92387953251128674*t2295));
  s1191 = ((0.38268343236508978*t2295) - (0.92387953251128674*t2294));
  s1192 = P2[(a3528 + 64)];
  s1193 = P2[(a3528 + 65)];
  s1194 = P2[(a3528 + 320)];
  s1195 = P2[(a3528 + 321)];
  t2296 = (s1192 + s1194);
  t2297 = (s1193 + s1195);
  t2298 = (s1192 - s1194);
  t2299 = (s1193 - s1195);
  s1196 = P2[(a3528 + 192)];
  s1197 = P2[(a3528 + 193)];
  s1198 = P2[(a3528 + 448)];
  s1199 = P2[(a3528 + 449)];
  t2300 = (s1196 + s1198);
  t2301 = (s1197 + s1199);
  t2302 = (s1196 - s1198);
  t2303 = (s1197 - s1199);
  t2304 = (t2296 + t2300);
  t2305 = (t2297 + t2301);
  t2306 = (t2296 - t2300);
  t2307 = (t2297 - t2301);
  a3531 = (0.70710678118654757*(t2298 + t2303));
  a3532 = (0.70710678118654757*(t2299 - t2302));
  s1200 = (a3531 + a3532);
  s1201 = (a3532 - a3531);
  a3533 = (0.70710678118654757*(t2299 + t2302));
  a3534 = (0.70710678118654757*(t2298 - t2303));
  s1202 = (a3533 - a3534);
  s1203 = (a3534 + a3533);
  s1204 = P2[(a3528 + 96)];
  s1205 = P2[(a3528 + 97)];
  s1206 = P2[(a3528 + 352)];
  s1207 = P2[(a3528 + 353)];
  t2308 = (s1204 + s1206);
  t2309 = (s1205 + s1207);
  t2310 = (s1204 - s1206);
  t2311 = (s1205 - s1207);
  s1208 = P2[(a3528 + 224)];
  s1209 = P2[(a3528 + 225)];
  s1210 = P2[(a3528 + 480)];
  s1211 = P2[(a3528 + 481)];
  t2312 = (s1208 + s1210);
  t2313 = (s1209 + s1211);
  t2314 = (s1208 - s1210);
  t2315 = (s1209 - s1211);
  t2316 = (t2308 + t2312);
  t2317 = (t2309 + t2313);
  a3535 = (0.70710678118654757*(t2309 - t2313));
  a3536 = (0.70710678118654757*(t2308 - t2312));
  s1212 = (a3535 - a3536);
  s1213 = (a3536 + a3535);
  t2318 = (t2310 + t2315);
  t2319 = (t2311 - t2314);
  t2320 = (t2310 - t2315);
  t2321 = (t2311 + t2314);
  s1214 = ((0.38268343236508978*t2318) + (0.92387953251128674*t2319));
  s1215 = ((0.38268343236508978*t2319) - (0.92387953251128674*t2318));
  s1216 = ((0.92387953251128674*t2320) + (0.38268343236508978*t2321));
  s1217 = ((0.38268343236508978*t2320) - (0.92387953251128674*t2321));
  t2322 = (t2274 + t2304);
  t2323 = (t2275 + t2305);
  t2324 = (t2274 - t2304);
  t2325 = (t2275 - t2305);
  t2326 = (t2290 + t2316);
  t2327 = (t2291 + t2317);
  t2328 = (t2290 - t2316);
  t2329 = (t2291 - t2317);
  a3537 = (a3526 + (32*a3527));
  T63[a3537] = (t2322 + t2326);
  T63[(a3537 + 1)] = (t2323 + t2327);
  T63[(a3537 + 16)] = (t2322 - t2326);
  T63[(a3537 + 17)] = (t2323 - t2327);
  T63[(a3537 + 8)] = (t2324 + t2329);
  T63[(a3537 + 9)] = (t2325 - t2328);
  T63[(a3537 + 24)] = (t2324 - t2329);
  T63[(a3537 + 25)] = (t2325 + t2328);
  t2330 = (t2278 + s1200);
  t2331 = (t2279 + s1201);
  t2332 = (t2278 - s1200);
  t2333 = (t2279 - s1201);
  t2334 = (s1188 + s1214);
  t2335 = (s1189 + s1215);
  t2336 = (s1188 - s1214);
  t2337 = (s1189 - s1215);
  T63[(a3537 + 2)] = (t2330 + t2334);
  T63[(a3537 + 3)] = (t2331 + t2335);
  T63[(a3537 + 18)] = (t2330 - t2334);
  T63[(a3537 + 19)] = (t2331 - t2335);
  T63[(a3537 + 10)] = (t2332 + t2337);
  T63[(a3537 + 11)] = (t2333 - t2336);
  T63[(a3537 + 26)] = (t2332 - t2337);
  T63[(a3537 + 27)] = (t2333 + t2336);
  t2338 = (t2276 + t2307);
  t2339 = (t2277 - t2306);
  t2340 = (t2276 - t2307);
  t2341 = (t2277 + t2306);
  t2342 = (s1186 + s1212);
  t2343 = (s1187 - s1213);
  t2344 = (s1186 - s1212);
  t2345 = (s1187 + s1213);
  T63[(a3537 + 4)] = (t2338 + t2342);
  T63[(a3537 + 5)] = (t2339 + t2343);
  T63[(a3537 + 20)] = (t2338 - t2342);
  T63[(a3537 + 21)] = (t2339 - t2343);
  T63[(a3537 + 12)] = (t2340 + t2345);
  T63[(a3537 + 13)] = (t2341 - t2344);
  T63[(a3537 + 28)] = (t2340 - t2345);
  T63[(a3537 + 29)] = (t2341 + t2344);
  t2346 = (t2280 + s1202);
  t2347 = (t2281 - s1203);
  t2348 = (t2280 - s1202);
  t2349 = (t2281 + s1203);
  t2350 = (s1190 - s1216);
  t2351 = (s1191 + s1217);
  t2352 = (s1190 + s1216);
  t2353 = (s1191 - s1217);
  T63[(a3537 + 6)] = (t2346 + t2350);
  T63[(a3537 + 7)] = (t2347 + t2351);
  T63[(a3537 + 22)] = (t2346 - t2350);
  T63[(a3537 + 23)] = (t2347 - t2351);
  T63[(a3537 + 14)] = (t2348 + t2353);
  T63[(a3537 + 15)] = (t2349 - t2352);
  T63[(a3537 + 30)] = (t2348 - t2353);
  T63[(a3537 + 31)] = (t2349 + t2352);
  __syncthreads();
  double a4512, a4513, a4514, a4515, a4516, a4517, a4518, a4519,
         a4520, a4521, a4522, a4523, a4524, a4525, a4526, a4527,
         a4528, a4529, a4530, a4531, a4532, a4533, a4534, a4535,
         a4536, a4537, a4538, a4539, a4540, a4541, a4542, a4543,
         a4544, a4545, a4546, a4547, a4548, a4549, a4550, a4551,
         s1458, s1459, s1460, s1461, s1462, s1463, s1464, s1465,
         s1466, s1467, s1468, s1469, s1470, s1471, s1472, s1473,
         s1474, s1475, s1476, s1477, s1478, s1479, s1480, s1481,
         s1482, s1483, s1484, s1485, s1486, s1487, s1488, s1489,
         s1490, s1491, s1492, s1493, s1494, s1495, s1496, s1497,
         s1498, s1499, s1500, s1501, s1502, s1503, s1504, s1505,
         s1506, s1507, s1508, s1509, s1510, s1511, s1512, s1513,
         s1514, s1515, s1516, s1517, s1518, s1519, s1520, s1521,
         s1522, s1523, s1524, s1525, s1526, s1527, s1528, s1529,
         s1530, s1531, s1532, s1533, s1534, s1535, s1536, s1537,
         t2698, t2699, t2700, t2701, t2702, t2703, t2704, t2705,
         t2706, t2707, t2708, t2709, t2710, t2711, t2712, t2713,
         t2714, t2715, t2716, t2717, t2718, t2719, t2720, t2721,
         t2722, t2723, t2724, t2725, t2726, t2727, t2728, t2729,
         t2730, t2731, t2732, t2733, t2734, t2735, t2736, t2737,
         t2738, t2739, t2740, t2741, t2742, t2743, t2744, t2745,
         t2746, t2747, t2748, t2749, t2750, t2751, t2752, t2753,
         t2754, t2755, t2756, t2757, t2758, t2759, t2760, t2761,
         t2762, t2763, t2764, t2765, t2766, t2767, t2768, t2769,
         t2770, t2771, t2772, t2773, t2774, t2775, t2776, t2777,
         t2778, t2779, t2780, t2781, t2782, t2783, t2784, t2785;
  int a4508, a4509, a4510, a4511, a4552;
  a4508 = (threadIdx_x / 16);
  a4509 = (threadIdx_x % 16);
  a4510 = ((512*a4508) + (2*a4509));
  s1458 = T63[a4510];
  s1459 = T63[(a4510 + 1)];
  s1460 = T63[(a4510 + 256)];
  s1461 = T63[(a4510 + 257)];
  a4511 = (32*a4509);
  a4512 = D3[a4511];
  a4513 = D3[(a4511 + 1)];
  s1462 = ((a4512*s1458) - (a4513*s1459));
  s1463 = ((a4513*s1458) + (a4512*s1459));
  a4514 = D3[(a4511 + 2)];
  a4515 = D3[(a4511 + 3)];
  s1464 = ((a4514*s1460) - (a4515*s1461));
  s1465 = ((a4515*s1460) + (a4514*s1461));
  t2698 = (s1462 + s1464);
  t2699 = (s1463 + s1465);
  t2700 = (s1462 - s1464);
  t2701 = (s1463 - s1465);
  s1466 = T63[(a4510 + 128)];
  s1467 = T63[(a4510 + 129)];
  s1468 = T63[(a4510 + 384)];
  s1469 = T63[(a4510 + 385)];
  a4516 = D3[(4 + a4511)];
  a4517 = D3[(5 + a4511)];
  s1470 = ((a4516*s1466) - (a4517*s1467));
  s1471 = ((a4517*s1466) + (a4516*s1467));
  a4518 = D3[(6 + a4511)];
  a4519 = D3[(7 + a4511)];
  s1472 = ((a4518*s1468) - (a4519*s1469));
  s1473 = ((a4519*s1468) + (a4518*s1469));
  t2702 = (s1470 + s1472);
  t2703 = (s1471 + s1473);
  t2704 = (s1470 - s1472);
  t2705 = (s1471 - s1473);
  t2706 = (t2698 + t2702);
  t2707 = (t2699 + t2703);
  t2708 = (t2698 - t2702);
  t2709 = (t2699 - t2703);
  t2710 = (t2700 + t2705);
  t2711 = (t2701 - t2704);
  t2712 = (t2700 - t2705);
  t2713 = (t2701 + t2704);
  s1474 = T63[(a4510 + 32)];
  s1475 = T63[(a4510 + 33)];
  s1476 = T63[(a4510 + 288)];
  s1477 = T63[(a4510 + 289)];
  a4520 = D3[(a4511 + 8)];
  a4521 = D3[(9 + a4511)];
  s1478 = ((a4520*s1474) - (a4521*s1475));
  s1479 = ((a4521*s1474) + (a4520*s1475));
  a4522 = D3[(10 + a4511)];
  a4523 = D3[(11 + a4511)];
  s1480 = ((a4522*s1476) - (a4523*s1477));
  s1481 = ((a4523*s1476) + (a4522*s1477));
  t2714 = (s1478 + s1480);
  t2715 = (s1479 + s1481);
  t2716 = (s1478 - s1480);
  t2717 = (s1479 - s1481);
  s1482 = T63[(a4510 + 160)];
  s1483 = T63[(a4510 + 161)];
  s1484 = T63[(a4510 + 416)];
  s1485 = T63[(a4510 + 417)];
  a4524 = D3[(12 + a4511)];
  a4525 = D3[(13 + a4511)];
  s1486 = ((a4524*s1482) - (a4525*s1483));
  s1487 = ((a4525*s1482) + (a4524*s1483));
  a4526 = D3[(14 + a4511)];
  a4527 = D3[(15 + a4511)];
  s1488 = ((a4526*s1484) - (a4527*s1485));
  s1489 = ((a4527*s1484) + (a4526*s1485));
  t2718 = (s1486 + s1488);
  t2719 = (s1487 + s1489);
  t2720 = (s1486 - s1488);
  t2721 = (s1487 - s1489);
  t2722 = (t2714 + t2718);
  t2723 = (t2715 + t2719);
  a4528 = (0.70710678118654757*(t2714 - t2718));
  a4529 = (0.70710678118654757*(t2715 - t2719));
  s1490 = (a4528 + a4529);
  s1491 = (a4529 - a4528);
  t2724 = (t2716 + t2721);
  t2725 = (t2717 - t2720);
  t2726 = (t2716 - t2721);
  t2727 = (t2717 + t2720);
  s1492 = ((0.92387953251128674*t2724) + (0.38268343236508978*t2725));
  s1493 = ((0.92387953251128674*t2725) - (0.38268343236508978*t2724));
  s1494 = ((0.38268343236508978*t2726) + (0.92387953251128674*t2727));
  s1495 = ((0.38268343236508978*t2727) - (0.92387953251128674*t2726));
  s1496 = T63[(a4510 + 64)];
  s1497 = T63[(a4510 + 65)];
  s1498 = T63[(a4510 + 320)];
  s1499 = T63[(a4510 + 321)];
  a4530 = D3[(a4511 + 16)];
  a4531 = D3[(17 + a4511)];
  s1500 = ((a4530*s1496) - (a4531*s1497));
  s1501 = ((a4531*s1496) + (a4530*s1497));
  a4532 = D3[(18 + a4511)];
  a4533 = D3[(19 + a4511)];
  s1502 = ((a4532*s1498) - (a4533*s1499));
  s1503 = ((a4533*s1498) + (a4532*s1499));
  t2728 = (s1500 + s1502);
  t2729 = (s1501 + s1503);
  t2730 = (s1500 - s1502);
  t2731 = (s1501 - s1503);
  s1504 = T63[(a4510 + 192)];
  s1505 = T63[(a4510 + 193)];
  s1506 = T63[(a4510 + 448)];
  s1507 = T63[(a4510 + 449)];
  a4534 = D3[(20 + a4511)];
  a4535 = D3[(21 + a4511)];
  s1508 = ((a4534*s1504) - (a4535*s1505));
  s1509 = ((a4535*s1504) + (a4534*s1505));
  a4536 = D3[(22 + a4511)];
  a4537 = D3[(23 + a4511)];
  s1510 = ((a4536*s1506) - (a4537*s1507));
  s1511 = ((a4537*s1506) + (a4536*s1507));
  t2732 = (s1508 + s1510);
  t2733 = (s1509 + s1511);
  t2734 = (s1508 - s1510);
  t2735 = (s1509 - s1511);
  t2736 = (t2728 + t2732);
  t2737 = (t2729 + t2733);
  t2738 = (t2728 - t2732);
  t2739 = (t2729 - t2733);
  a4538 = (0.70710678118654757*(t2730 + t2735));
  a4539 = (0.70710678118654757*(t2731 - t2734));
  s1512 = (a4538 + a4539);
  s1513 = (a4539 - a4538);
  a4540 = (0.70710678118654757*(t2731 + t2734));
  a4541 = (0.70710678118654757*(t2730 - t2735));
  s1514 = (a4540 - a4541);
  s1515 = (a4541 + a4540);
  s1516 = T63[(a4510 + 96)];
  s1517 = T63[(a4510 + 97)];
  s1518 = T63[(a4510 + 352)];
  s1519 = T63[(a4510 + 353)];
  a4542 = D3[(a4511 + 24)];
  a4543 = D3[(25 + a4511)];
  s1520 = ((a4542*s1516) - (a4543*s1517));
  s1521 = ((a4543*s1516) + (a4542*s1517));
  a4544 = D3[(26 + a4511)];
  a4545 = D3[(27 + a4511)];
  s1522 = ((a4544*s1518) - (a4545*s1519));
  s1523 = ((a4545*s1518) + (a4544*s1519));
  t2740 = (s1520 + s1522);
  t2741 = (s1521 + s1523);
  t2742 = (s1520 - s1522);
  t2743 = (s1521 - s1523);
  s1524 = T63[(a4510 + 224)];
  s1525 = T63[(a4510 + 225)];
  s1526 = T63[(a4510 + 480)];
  s1527 = T63[(a4510 + 481)];
  a4546 = D3[(28 + a4511)];
  a4547 = D3[(29 + a4511)];
  s1528 = ((a4546*s1524) - (a4547*s1525));
  s1529 = ((a4547*s1524) + (a4546*s1525));
  a4548 = D3[(30 + a4511)];
  a4549 = D3[(31 + a4511)];
  s1530 = ((a4548*s1526) - (a4549*s1527));
  s1531 = ((a4549*s1526) + (a4548*s1527));
  t2744 = (s1528 + s1530);
  t2745 = (s1529 + s1531);
  t2746 = (s1528 - s1530);
  t2747 = (s1529 - s1531);
  t2748 = (t2740 + t2744);
  t2749 = (t2741 + t2745);
  a4550 = (0.70710678118654757*(t2741 - t2745));
  a4551 = (0.70710678118654757*(t2740 - t2744));
  s1532 = (a4550 - a4551);
  s1533 = (a4551 + a4550);
  t2750 = (t2742 + t2747);
  t2751 = (t2743 - t2746);
  t2752 = (t2742 - t2747);
  t2753 = (t2743 + t2746);
  s1534 = ((0.38268343236508978*t2750) + (0.92387953251128674*t2751));
  s1535 = ((0.38268343236508978*t2751) - (0.92387953251128674*t2750));
  s1536 = ((0.92387953251128674*t2752) + (0.38268343236508978*t2753));
  s1537 = ((0.38268343236508978*t2752) - (0.92387953251128674*t2753));
  t2754 = (t2706 + t2736);
  t2755 = (t2707 + t2737);
  t2756 = (t2706 - t2736);
  t2757 = (t2707 - t2737);
  t2758 = (t2722 + t2748);
  t2759 = (t2723 + t2749);
  t2760 = (t2722 - t2748);
  t2761 = (t2723 - t2749);
  a4552 = ((8*blockIdx_x) + (131072*a4509) + (2*a4508));
  Y[a4552] = (t2754 + t2758);
  Y[(a4552 + 1)] = (t2755 + t2759);
  Y[(a4552 + 16777216)] = (t2754 - t2758);
  Y[(a4552 + 16777217)] = (t2755 - t2759);
  Y[(a4552 + 8388608)] = (t2756 + t2761);
  Y[(a4552 + 8388609)] = (t2757 - t2760);
  Y[(a4552 + 25165824)] = (t2756 - t2761);
  Y[(a4552 + 25165825)] = (t2757 + t2760);
  t2762 = (t2710 + s1512);
  t2763 = (t2711 + s1513);
  t2764 = (t2710 - s1512);
  t2765 = (t2711 - s1513);
  t2766 = (s1492 + s1534);
  t2767 = (s1493 + s1535);
  t2768 = (s1492 - s1534);
  t2769 = (s1493 - s1535);
  Y[(a4552 + 2097152)] = (t2762 + t2766);
  Y[(a4552 + 2097153)] = (t2763 + t2767);
  Y[(a4552 + 18874368)] = (t2762 - t2766);
  Y[(a4552 + 18874369)] = (t2763 - t2767);
  Y[(a4552 + 10485760)] = (t2764 + t2769);
  Y[(a4552 + 10485761)] = (t2765 - t2768);
  Y[(a4552 + 27262976)] = (t2764 - t2769);
  Y[(a4552 + 27262977)] = (t2765 + t2768);
  t2770 = (t2708 + t2739);
  t2771 = (t2709 - t2738);
  t2772 = (t2708 - t2739);
  t2773 = (t2709 + t2738);
  t2774 = (s1490 + s1532);
  t2775 = (s1491 - s1533);
  t2776 = (s1490 - s1532);
  t2777 = (s1491 + s1533);
  Y[(a4552 + 4194304)] = (t2770 + t2774);
  Y[(a4552 + 4194305)] = (t2771 + t2775);
  Y[(a4552 + 20971520)] = (t2770 - t2774);
  Y[(a4552 + 20971521)] = (t2771 - t2775);
  Y[(a4552 + 12582912)] = (t2772 + t2777);
  Y[(a4552 + 12582913)] = (t2773 - t2776);
  Y[(a4552 + 29360128)] = (t2772 - t2777);
  Y[(a4552 + 29360129)] = (t2773 + t2776);
  t2778 = (t2712 + s1514);
  t2779 = (t2713 - s1515);
  t2780 = (t2712 - s1514);
  t2781 = (t2713 + s1515);
  t2782 = (s1494 - s1536);
  t2783 = (s1495 + s1537);
  t2784 = (s1494 + s1536);
  t2785 = (s1495 - s1537);
  Y[(a4552 + 6291456)] = (t2778 + t2782);
  Y[(a4552 + 6291457)] = (t2779 + t2783);
  Y[(a4552 + 23068672)] = (t2778 - t2782);
  Y[(a4552 + 23068673)] = (t2779 - t2783);
  Y[(a4552 + 14680064)] = (t2780 + t2785);
  Y[(a4552 + 14680065)] = (t2781 - t2784);
  Y[(a4552 + 31457280)] = (t2780 - t2785);
  Y[(a4552 + 31457281)] = (t2781 + t2784);
  __syncthreads();
}

int main(int argc, char* argv[])
{
  if (argc != 2) {
    printf("Usage: %s <repeat>\n", argv[0]);
    return 1;
  }
  const int repeat = atoi(argv[1]);

  const int n = 256*256*256*2;
  const int t = 33554432;
  size_t dat_size = n * sizeof(double);

  std::mt19937 engine(n);
  std::uniform_real_distribution<double> dist(0.0, 1.0);
  double *x = (double*) malloc (dat_size);
  for (int i = 0; i < n; i++) x[i] = dist(engine);

  double *y = (double*) malloc (dat_size);

#ifdef USE_GPU
  sycl::queue q(sycl::gpu_selector_v, sycl::property::queue::in_order());
#else
  sycl::queue q(sycl::cpu_selector_v, sycl::property::queue::in_order());
#endif

  double *D = sycl::malloc_device<double>(512, q);
  q.memcpy(D, d, 512 * sizeof(double));

  double *Y = sycl::malloc_device<double>(n, q);

  double *X = sycl::malloc_device<double>(n, q);
  q.memcpy(X, x, dat_size);

  double *P1 = sycl::malloc_device<double>(t, q);
  double *P2 = sycl::malloc_device<double>(t, q);

  sycl::range<1> b1(64), b2(64), b3(64);
  sycl::range<1> g1(16384*64), g2(16384*64), g3(16384*64);

  q.wait();
  auto start = std::chrono::steady_clock::now();

  for (int i = 0; i < repeat; i++) {
    q.submit([&] (sycl::handler &cgh) {
      sycl::local_accessor<double, 1> temp (sycl::range<1>(2048), cgh);
      cgh.parallel_for<class cu0>(sycl::nd_range<1>(g1, b1), [=] (sycl::nd_item<1> item) {
        ker_zmddft_fwd_256x256x256_cu0(item, temp.get_pointer(), D, X, P1);
      });
    });

    q.submit([&] (sycl::handler &cgh) {
      sycl::local_accessor<double, 1> temp (sycl::range<1>(2048), cgh);
      cgh.parallel_for<class cu1>(sycl::nd_range<1>(g2, b2), [=] (sycl::nd_item<1> item) {
        ker_zmddft_fwd_256x256x256_cu1(item, temp.get_pointer(), D, P1, P2);
      });
    });

    q.submit([&] (sycl::handler &cgh) {
      sycl::local_accessor<double, 1> temp (sycl::range<1>(2048), cgh);
      cgh.parallel_for<class cu2>(sycl::nd_range<1>(g3, b3), [=] (sycl::nd_item<1> item) {
        ker_zmddft_fwd_256x256x256_cu2(item, temp.get_pointer(), D, P2, Y);
      });
    });
  }

  q.wait();
  auto end = std::chrono::steady_clock::now();
  auto time = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();
  printf("Average kernel execution time: %.3f (ms)\n", time * 1e-6f / repeat);

  q.memcpy(y, Y, dat_size).wait();

  double checksum = 0;
  for (int i = 0; i < n; i++) checksum += y[i];
  printf("checksum = %lf\n", checksum);

  sycl::free(X, q);
  sycl::free(Y, q);
  sycl::free(P1, q);
  sycl::free(P2, q);
  free(x);
  free(y);

  return 0;
}
